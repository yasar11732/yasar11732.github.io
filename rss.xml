<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>YSAR.NET</title><link>http://ysar.net/</link><description>Yaşar Arabacı İnternet Günlüğü</description><atom:link href="http://ysar.net/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>tr</language><lastBuildDate>Mon, 16 Mar 2020 21:00:45 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Büyük Sayı Algoritmaları - Tamsayılarda Dört İşlem</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-tamsayi-dort-islem.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Daha önceki yazılarda, doğal sayılarda dört işlem algoritmalarına değinmiştik.
Bu yazıda, önceden yazdığımız alt seviye fonksiyonları kullanarak, tam sayılar üzerinde
dört işlem gerçekleştiren fonksiyonları kodlayacağız.  &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/buyuk-sayi-islemleri-tamsayi-dort-islem.html"&gt;Devamını oku…&lt;/a&gt; (6 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-tamsayi-dort-islem.html</guid><pubDate>Fri, 13 Mar 2020 08:50:00 GMT</pubDate></item><item><title>Büyük Sayı Algoritmaları - Metin Dönüşümleri</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-metin.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Büyük sayı algoritmaları yazı dizisine, sayıdan metne,
metinden sayıya dönüşüm fonksiyonları ile devam ediyoruz.
Bu yazıda, onluk tabandaki metinler üzerinde işlem yapacağız.
Bu fonksiyonlardan yola çıkarak, diğer sayı tabanlarında
dönüşüm yapan fonksiyonlar da yazabilirsiniz.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ysar.net/algoritma/buyuk-sayi-islemleri-metin.html"&gt;Devamını oku…&lt;/a&gt; (8 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-metin.html</guid><pubDate>Thu, 12 Mar 2020 15:25:00 GMT</pubDate></item><item><title>Büyük Sayı Algoritmaları - Tam Sayılara Giriş</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-tamsayilar.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Yazı dizisinin ilk 4 yazısında, doğal sayılar üzerinde işlem
yapan temel fonksiyonlar yazdık. Genellikle, bu fonksiyonları
doğrudan kullanmayacağız. Onun yerine, bu yazıdan itibaren
ele alacağımız daha üst seviye fonksiyonları kullanacağız.Yeni
fonksiyonlarımız, önceki yazılarda değinmediğimiz hafıza
yönetimini sağlayacağı gibi, negatif sayılar üzerinde de
işlem yapabilecek.&lt;/p&gt;
&lt;p&gt;Bilgisayarlarla negatif sayıları işlemenin çeşitli yöntemleri var.
Öncelikle, kısaca bu yöntemlerin üzerinden geçelim.&lt;/p&gt;
&lt;h3&gt;İşaret ve Mutlak Değer (Signed Magnitude Representation - SMR)&lt;/h3&gt;
&lt;p&gt;Yazı dilinde negatif sayının önüne eksi işareti koyduğumuz gibi,
bu yöntemde de sayının başına eksi işareti koyuyoruz. Tabi ki,
binary sistemde eksi işareti yok. Onun yerine, sayının en üst
bitini 1 olarak ayarlayarak, sayıyı negatif yapacağız. Bu gösterimde,
0 sayısı iki farklı şekilde (+0 ve -0) yazılabildiği için,
&lt;code&gt;n&lt;/code&gt; bit kullanarak, &lt;code&gt;2^n - 1&lt;/code&gt; farklı sayı ifade edilebiliyor.
Bu sayılar üzerinde aritmetik işlem yaparken, pozitif/negatif
kontrolü yapmak gerekiyor. Bu düzenin kullanım alanına örnek
olarak, &lt;code&gt;float&lt;/code&gt; türündeki sayıları verebiliriz.&lt;/p&gt;
&lt;h3&gt;1'in Tümleyeni (One's Complement)&lt;/h3&gt;
&lt;p&gt;Bu gösterimde, pozitif sayıların bitlerini tersine çevirerek, negatif
sayıları ifade ediyoruz. Örneğin, 8 bitlik '00000001' sayısı +1'i
ifade ederken, '11111110' sayısı ise -1'i ifade ediyor. SMR'de olduğu
gibi, en üst biti kontrol ederek, sayının işaretini tespit edilebiliyor.
Yine SMR'de olduğu gibi, sıfırın iki farklı gösterimi olduğundan, &lt;code&gt;n&lt;/code&gt;
bit kullanarak, &lt;code&gt;2^n - 1&lt;/code&gt; farklı değer ifade edebiliyoruz. Rivayet
odur ki, çok eski bilgisayarda bu yöntem kullanılırmış, ama çoğu
modern bilgisayarda negatif tam sayılar için 2'nin tümleyeni düzeni
kullanılıyor.&lt;/p&gt;
&lt;h3&gt;2'nin Tümleyeni (Two's Complement)&lt;/h3&gt;
&lt;p&gt;Bu yöntem üzerinde biraz daha fazla duracağım, çünkü modern
bilgisayarlarda tam sayılar bu şekilde ifade ediliyor. Aşağıdaki
tablodan, 8 bit signed bir tam sayının her bitinin değerini
inceleyebilirsiniz.&lt;/p&gt;
&lt;pre&gt;
+-------+------+-----+-----+-----+-----+-----+-----+-----+
| Bit   | 7    | 6   | 5   | 4   | 3   | 2   | 1   | 0   |
+-------+------+-----+-----+-----+-----+-----+-----+-----+
| İkili | -2^7 | 2^6 | 2^5 | 2^4 | 2^3 | 2^2 | 2^1 | 2^0 |
+-------+------+-----+-----+-----+-----+-----+-----+-----+
| Onlu  | -128 | 64  | 32  | 16  | 8   | 4   | 2   | 1   |
+-------+------+-----+-----+-----+-----+-----+-----+-----+
&lt;/pre&gt;

&lt;p&gt;Bu yöntem bir farkla, 1'in tümleyeni ile aynı. 1'in tümleyeni
yöntemi ile, bir sayının negatifini almak istediğinizde, tüm
bitlerini tersine çevirmeniz gerekiyor. 2'nin tümleyeni yönteminde
ise, tüm bitleri çevirip, sonuca 1 eklemeniz gerekiyor.&lt;/p&gt;
&lt;p&gt;Bu yöntemin en büyük avantajı, modüler aritmetik kurallarını bozmuyor
olması. Örneğin, \(127 + 1 \equiv -128 \mod 128 \). Aynı şekilde,
signed integer değerleri arasında toplama yaparken, 127 ile 1 sayısını
topladığınızda, &lt;code&gt;-128&lt;/code&gt; sonucunu elde edersiniz.&lt;/p&gt;
&lt;pre&gt;
  0 1 1 1 1 1 1 1
+ 0 0 0 0 0 0 0 1
-----------------
  1 0 0 0 0 0 0 0
&lt;/pre&gt;

&lt;p&gt;Toplama işlemi yaparken, sayıların pozitif olup olmadığına dikkat etmeksizin, işlem yapabiliriz.
Aşağıdaki örnekte, +1 ile -1'in toplamını 0 olarak buluyoruz.&lt;/p&gt;
&lt;pre&gt;
  0 0 0 0 0 0 0 1 (+1)
+ 1 1 1 1 1 1 1 1 (-1)
-----------------
1 0 0 0 0 0 0 0 0
&lt;/pre&gt;

&lt;p&gt;Sonucun bir biti dışarıya taşdığı için, +1 ile -1 toplamından 0 sonucu elde
ediyoruz. Çıkarma işlemi de, negatif sayı ile toplamaya eşdeğer olduğundan,
yukarıdaki örneği birden bir çıkarma olarak da düşünebilirsiniz.&lt;/p&gt;
&lt;p&gt;Bu düzenin yapısı gereği, toplama, çıkarma ve çarpma
yaparken, sayıların pozitif olmasına dikkat edilmeksizin işlem yapılabilir.
Bu avantaj işlemci üreticilerine cazip gelmiş olacak ki, signed işlem yapabilen
çoğu işlemci bu düzeni kullanıyor.&lt;/p&gt;
&lt;h3&gt;Kaydırılmış İkili (Offset Binary)&lt;/h3&gt;
&lt;p&gt;Bu düzende, her sayıyı kendinden &lt;code&gt;n&lt;/code&gt; fazla bir
sayı ile ifade ediyoruz. Örneğin, 8 bitlik signed
integer için, &lt;code&gt;n&lt;/code&gt; 128 olsun.&lt;/p&gt;
&lt;pre&gt;
+------+----------+
|Sayı  | Kodlanışı|
+------+----------+
| 127  | 255      |
| 126  | 254      |
| 1    | 129      |
| 0    | 128      |
| -1   | 127      |
| -127 | 1        |
| -128 | 0        |
+------+----------+
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;float&lt;/code&gt; türündeki sayıların exponent kısmı için, bu düzen kullanılıyor.&lt;/p&gt;
&lt;h3&gt;Hangisini Kullanmalıyız&lt;/h3&gt;
&lt;p&gt;Yazdığım ilk büyük sayı kütüphanesi için, 2'nin tümleyeni
yöntemini tercih etmiştim. Dört işlemin kolaylığı konusu
çok cazip gelmişti. Ancak, işlemcilerin yaptığı gibi
sabit genişlikteki sayılarla ilgilenmediğimiz için,
2'nin tümleyeni düzeninin avantajları çok da önemli
olmuyor. Aynı zamanda, büyük sayıların mutlak
değerini almak gerektiğinde, tüm sayının üzerinden
geçip, tüm bitlerini tersine çevirip sonuca bir eklemek
gerektiği için, oldukça uzun sürüyor. Bu bölme işlemi
için büyük bir sorun, çünkü pozitif ve negatif sayılar
arasında bölme yaparken, mutlak değer üzerinden
bölme yapmak gerekiyor. Modüler aritmeği de bölme işlemi
üzerinden yapacağımız için, 2'nin tümleyeni çok kötü
bir tercih. Kendim acı bir şekilde tecrübe ettim. Bu nedenle,
GMP kütüphanesinin yaptığı gibi, Signed Magnitude (SMR) düzenini
kullanacağız.&lt;/p&gt;
&lt;p&gt;Artık biraz kod yazabiliriz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;bnz_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;bnz_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bnz_ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bnz_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bn_constptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Tam sayıları, dinamik array veri yapısında tutacağız. &lt;code&gt;bnz_t&lt;/code&gt;
veri yapısının &lt;code&gt;alloc&lt;/code&gt; üyesi, kaç hanelik yer ayırdığımızı tutacak.
&lt;code&gt;length&lt;/code&gt; üyesi, hem sayının kaç haneli (2^32lik tabanda) olduğunu
hem de pozitif mi yoksa negatif mi olduğunu tutacak. Örneğin, &lt;code&gt;length&lt;/code&gt; -5 ise,
sayının 5 haneli ve negatif olduğunu anlayacağız. Eğer &lt;code&gt;length&lt;/code&gt;
0 ise, tamsayının da 0 olduğunu anlayacağız. Eğer &lt;code&gt;length&lt;/code&gt; sıfır
değilse, ama &lt;code&gt;alloc&lt;/code&gt; 0 ise, hafızanın stack üzerinde ayrıldığını
anlayacağız.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bnz_t&lt;/code&gt;'yi kullanıma hazırlamak için, aşağıdaki fonksiyonu kullanacağız. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bnz_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bnz_ptr&lt;/span&gt; &lt;span class="n"&gt;bnz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bnz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bnz_t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;bnz_init&lt;/code&gt; bir kez çağırıldıktan sonra, &lt;code&gt;bnz_t&lt;/code&gt; türü farklı sayıları tutmak için tekrar tekrar kullanılabilir.&lt;/p&gt;
&lt;p&gt;Hafızada ayırdığımız yerin, &lt;code&gt;n&lt;/code&gt; haneli bir sayıyı tutabilecek kadar büyük olmasını temin etmek için, aşağıdaki makroyu kullanacağız.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define BN_GROW(bn, n) ((n) &amp;gt; (bn)-&amp;gt;alloc ? \&lt;/span&gt;
&lt;span class="cp"&gt;    bnz_resize((bn), (n)) \&lt;/span&gt;
&lt;span class="cp"&gt;    : (bn)-&amp;gt;digits)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bu makro, eğer zaten yeterli yer ayrılmışsa, &lt;code&gt;digits&lt;/code&gt; üyesini
döndürecek, aksi takdirde, &lt;code&gt;bnz_resize&lt;/code&gt; fonksiyonunu çağıracak.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;bn_xrealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p_old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;p_new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p_new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;bn_xmalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;bnz_resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bnz_ptr&lt;/span&gt; &lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_xrealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_xmalloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;alloc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;bn_xmalloc&lt;/code&gt; ve &lt;code&gt;bn_xrealloc&lt;/code&gt; fonksiyonları, &lt;code&gt;malloc&lt;/code&gt; ve &lt;code&gt;realloc&lt;/code&gt;
kullanarak gerekli hafıza alanlarını ayıramazlarsa, hata koduyla
programı sonlandırıyor. &lt;code&gt;bnz_resize&lt;/code&gt; fonksiyonu, daha önce
ayrılmış bir hafıza alanı varsa, onu genişletiyor. Eğer daha
önce bir hafıza ayrılmamışsa, yeni yer ayırıyor.&lt;/p&gt;
&lt;p&gt;Büyük tamsayılara, signed integer değeri atamak için, aşağıdaki
fonksiyonu kullanacağız.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="nf"&gt;bn_trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;current_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;current_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;current_size&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bnz_set_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bnz_ptr&lt;/span&gt; &lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;num_digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BN_GROW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_digits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BN_ABS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// sayi positif&lt;/span&gt;
        &lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_digits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c1"&gt;// sayi negatif&lt;/span&gt;
        &lt;span class="n"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bn_trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_digits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Eğer, &lt;code&gt;i&lt;/code&gt;'nin değeri sıfır ise, tek yapmamız gereken &lt;code&gt;length&lt;/code&gt;'i
sıfıra atamak. &lt;code&gt;num_digits&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;'nin kaç hanede saklanacağını
tutuyor. Eğer &lt;code&gt;sizeof(int) == sizeof(bn_digit_t)&lt;/code&gt; ise, bu değer
1 olacak. Yeterli yer ayırdığımızdan emin olmak için, &lt;code&gt;BN_GROW&lt;/code&gt;
makrosunu çağırıyoruz. &lt;code&gt;digits&lt;/code&gt; array'i içinde her zaman pozitif
sayılar saklayacağımız için, mutlak değer alıyoruz. &lt;code&gt;bn_trim&lt;/code&gt;
fonksiyonu ise, sayının başındaki sıfır haneleri silindikten
sonra kalan hane sayısını veriyor. Tam sayılar üzerinde
işlem yapacak algoritmaları &lt;code&gt;digits[length-1]&lt;/code&gt;'in
sıfır olmadığı varsayımına göre çalıştıracağımız için,
&lt;code&gt;bn_trim&lt;/code&gt; kullanarak, üstteki 0 hanelerini silmemiz gerekiyor.&lt;/p&gt;
&lt;p&gt;Sonraki yazılarda, iki sayının mutlak değerlerini karşılaştırmamız
gerekecek, bunun için, aşağıdaki fonksiyonları kullanacağız.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;bn_cmp_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;opsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;opsize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;opsize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;opsize&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;opsize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;opsize&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;opsize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;opsize&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;bn_cmp_nn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;op1size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;op2size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1size&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;op2size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;op2size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1size&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;op2size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bn_cmp_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;İlk fonksiyon, uzunlukları eşit olan iki doğal sayıyı karşılaştırmaya yarıyor. İkinci fonksiyon
ise, tüm uzunluklardaki doğal sayılar için kullanılabilir. İki doğal sayıyı karşılaştırırken,
eğer birinin hane sayısı diğerinden büyükse, özel bir inceleme yapmadan, hane sayısı
çok olanı büyük ilan edebiliriz. Hane sayılarının aynı olduğu durumlarda, üstten alta
doğru haneleri kontrol etmemiz gerekiyor. Herhangi bir hanede farklılık olduğunda,
sayıların hangisinin büyük olduğunu tespit edebiliriz. Eğer tüm haneleri eşitse,
sayılar da eşit olmak zorunda. Bu iki fonksiyon da, birinci argüman büyükse 1,
ikinci argüman büyükse -1, argümanlar eşit ise 0 döndürecek.&lt;/p&gt;
&lt;p&gt;Gelecek yazılarda, tamsayılar üzerinde dört işlem yapacağız. Bunun için, daha önceki
fonksiyonlardan faydalanmakla birlikte, işleme giren sayıların pozitif veya negatif
olma durumlarına dikkat edeceğiz.&lt;/p&gt;
&lt;h3&gt;Ek Kaynaklar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Knuth D. Art of The Computer Programming Vol 2 Section 4.3.1&lt;/li&gt;
&lt;li&gt;Wikipedia. &lt;a href="https://en.wikipedia.org/wiki/Signed_number_representations"&gt;Signed number representations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-tamsayilar.html</guid><pubDate>Sun, 08 Mar 2020 22:14:00 GMT</pubDate></item><item><title>Büyük Sayı Algoritmaları - Bölme</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-bolme.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Daha önceki yazılarda, değişken-genişlikteki doğal sayılar üzerinde
toplama, çıkarma ve çarpma algoritmalarına değinmiştik. Bu yazıda, D. Knuth'un
&lt;em&gt;The Art of The Computer Programming&lt;/em&gt; kitabının 4.3.1'inci kısmında anlatılan
&lt;em&gt;Algoritm D.&lt;/em&gt;'den bahsedeceğim. Bu algoritma, değişken-genişlikteki doğal
sayılarda bölme işlemi yaparken, kabul edilebilir bir performansa sahip.
Kodlara geçmeden önce, algoritmayı inceleyelim. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/buyuk-sayi-islemleri-bolme.html"&gt;Devamını oku…&lt;/a&gt; (7 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-bolme.html</guid><pubDate>Wed, 04 Mar 2020 20:18:00 GMT</pubDate></item><item><title>Rastgele Sayı Üretici</title><link>http://ysar.net/algoritma/rastgele-sayi-uretici.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Merhabalar,&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic"&gt;Multi-precision&lt;/a&gt; doğal sayılarda bölme yapan bir fonksiyonu test etmek için, C'deki &lt;code&gt;rand()&lt;/code&gt;
fonksiyonu ile rastgele sayı oluştururken, oluşturduğum sayıların
yeterince rastgele olmadığına (artık o ne demekse) karar verdim. Fonksiyon içinde, çok
nadiren de olsa çalışması gereken bir &lt;code&gt;if&lt;/code&gt; bloguna, milyarlarca sayı üretmeme rağmen girememiştim.
Hal böyle olunca, C'deki &lt;code&gt;rand()&lt;/code&gt;
fonksiyonuna alternatif olarak, &lt;a href="https://en.wikipedia.org/wiki/RC4"&gt;RC4&lt;/a&gt; tabanlı
bir rastgele sayı üretici oluşturdum.&lt;/p&gt;
&lt;p&gt;Bu rastgele sayı üreticinin özelliği, küçük sayılara daha fazla ağırlık veriyor olması. Dolayısı ile,
uniform dağılımda sayılar üretmiyor. Kriptografi alanında kullanılmaması gerektiğini de özellikle
vurgulamak istiyorum. Kodlar aşağıdaki gibi;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#if defined(__GNUC__)&lt;/span&gt;
&lt;span class="cp"&gt;#define nlz(x) __builtin_clz(x)&lt;/span&gt;
&lt;span class="cp"&gt;#elif defined(_MSC_VER)&lt;/span&gt;
&lt;span class="cp"&gt;#define nlz(x) __lzcnt(x)&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;nlz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;rngstate&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;rngstate&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_rng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;keysize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;keysize&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;myarc4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fill_random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myarc4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;_nlz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_nlz&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_nlz&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myarc4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;_nlz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Burada kullanmak isteyebileceğiniz iki fonksiyon var; &lt;code&gt;fill_random&lt;/code&gt; ve &lt;code&gt;myarc4&lt;/code&gt;. &lt;code&gt;myarc4&lt;/code&gt; fonksiyonu
RC4 şifrelemeden esinlenerek(!) yazdım. Her çağrıldığında, rastgele 8 bit bir değer döndürüyor. Ancak,
fonksiyonu kullanmadan önce, program başlangıcında bir kez &lt;code&gt;init_rng&lt;/code&gt; fonksiyonunu çağırmanız gerekiyor.
Argüman olarak statik bir string verirseniz, her seferinde aynı sayıları üretir. Eğer istediğiniz bu değilse,
&lt;code&gt;key&lt;/code&gt; olarak kullanılacak string'i &lt;code&gt;/dev/urandom&lt;/code&gt;'u okuyarak veya &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptgenrandom"&gt;CryptGenRandom&lt;/a&gt;
 fonksiyonunu kullanarak oluşturup, bununla birlikte &lt;code&gt;init_rng&lt;/code&gt;
fonksiyonunu çağırabilirsiniz.&lt;/p&gt;
&lt;p&gt;Herhangi uzunluktaki 32bit integer array'ini rastgele sayılarla doldurmak için, &lt;code&gt;fill_random&lt;/code&gt; fonksiyonu
kullanabilirsiniz. İlk argüman olarak array'i, ikinci argüman olarak da array uzunluğunu göndermeniz gerekiyor.
Yukarıda da bahsettiğim gibi, burada oluşacak sayılar, sıfıra doğru meyilli. Yaklaşık olarak 1/32 ihtimalle 0,
1/32 ihtimalle 1, 1/64 ihtimalle 2 ve 3 döndürmesini bekleyebilirsiniz. &lt;/p&gt;
&lt;p&gt;Standart kütüphanedeki &lt;code&gt;rand()&lt;/code&gt; fonksiyonuna nazaran oldukça yavaş kalabilir, ama, farklı bir dağılıma
sahip rastgele sayılar üretmek isterseniz işinize yarayabileceğini düşünüyorum.&lt;/p&gt;
&lt;p&gt;Kriptografi için kullanılmaması gerektiğini tekrar hatırlatayım.&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/algoritma/rastgele-sayi-uretici.html</guid><pubDate>Tue, 03 Mar 2020 22:28:00 GMT</pubDate></item><item><title>Büyük Sayı Algoritmaları - Çarpma</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-carpma.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/buyuk-sayi-islemleri-toplama-cikarma.html"&gt;Bir önceki yazıda&lt;/a&gt;, n-haneli doğal sayılar üzerinde toplama
çıkarma algoritmalarından bahsetmiştik. Bu yazıda m-haneli doğal sayılar ile n-haneli doğal sayılar arasında
çarpma işlemi yapan bir algoritmayı inceleyeceğiz. Bu algoritmanın ön çalışması olarak, bir haneli iki
sayı çarparak, iki haneli sonuç döndüren bir fonksiyon yazacağız. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bn_mul_n11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op1_h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op1_l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;BN_DIGIT_LOWMASK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2_h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2_l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;BN_DIGIT_LOWMASK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1_l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;op2_l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1_l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;op2_h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1_h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;op2_l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;p4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1_h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;op2_h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// carry&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;p4&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;BN_DIGIT_HI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;BN_DIGIT_LOWMASK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;32 bit iki sayının çarpımı, 64 bite kadar sonuç verebileceği için, 32 bitlik
çarpanları, 16 bitlik parçalara bölüp, parçaları ikişerli olarak çarpıp,
elde ettiğimiz sonuçları farklı oranlarda kaydırarak toplayıp, 2 haneli bir
sonuç elde edebilir. Kaydırma oranlarıyla ilgili olarak, aşağıdaki tabloyu
inceleyebilirsiniz.&lt;/p&gt;
&lt;pre&gt;
64      48      32      16      0
+---------------+-------+-------+
|op1_h x op2_h  |       |       |
+-------+-------+-------+-------+
|       |op1_h x op2_l  |       |
+-------+---------------+-------+
|       |op1_l x op2_h  |       |
+-------+-------+-------+-------+
|               |op1_l x op2_l  |
+---------------+---------------+
&lt;/pre&gt;

&lt;p&gt;Bunun neden işe yaradığını anlamak için, 32 bit \(u\) ve \(v\) sayılarını çarptığımızı
varsayalım. \(u_h\) sayının 16 bitlik üst kısmını, \(u_l\) ise sayının 16 bitlik alt kısmını
temsil etsin.&lt;/p&gt;
&lt;div&gt;
$$
\begin{align}
u &amp;amp; = 2^{16} * u_h + u_l \\
v &amp;amp; = 2^{16} * v_h + v_l \\
u * v &amp;amp; = (2^{16} * u_h + u_l) * (2^{16} * v_h + v_l) \\
 &amp;amp; = 2^{32} * u_h * v_h + 2^{16} * u_h * v_l + 2^{16} * v_h * u_l + u_l * v_l \\
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;Yukarıdaki fonksiyon genel olarak genişleyen (argümanlarından geniş sonuç veren) çarpma
işlemlerinde kullanılabilir. Ancak, birçok modern 32 bit işlemci, 64 bit sonuç verebiliyor.
64 bit işlemcilerde zaten böyle bir sorunumuz olmadığı için, aşağıdaki fonksiyon çoğunlukla
yukarıdakinden daha iyi bir performans verecektir.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bn_mul_n11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bn_long_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bn_long_digit_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bn_long_digit_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;1-hane x 1-hane çarpımı yaptıktan sonra, n-hane x 1-hane çarpımına geçebiliriz. Bir önceki yazıda egzersiz
olarak bıraktığım, n-haneli ve 1 haneli toplamı fonksiyonunu da burada tanımlıyorum.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="nf"&gt;bn_add_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="nf"&gt;bn_mul_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bn_mul_n11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;bn_add_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// bu carry döndüremez, döndürmemeli&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Burada &lt;code&gt;for&lt;/code&gt; döngüsünün her bir adımında, &lt;code&gt;op1&lt;/code&gt;'in bir hanesi ile, &lt;code&gt;op2&lt;/code&gt;'yi
çarpıyoruz. Bu çarpım bize 2 haneli bir sonuç veriyor. Bu sonuca, bir önceki
döngüden devir aldığımız sayıyı ekliyoruz. Elde ettiğimiz sonucun küçük hanesini
sonuç olarak yazıp, büyük hanesini bir sonraki döngü adımına devrediyoruz. Aynı
algoritmanın, onluk tabanda 7381 ile 5 arasında uygulanmış halini aşağıdaki
gibi çalışacaktır.&lt;/p&gt;
&lt;pre&gt;
i = 0, carry = 0: 1 x 5 = 5, 5 + 0 = 5 -&amp;gt; Sonuç[0] = 5, carry = 0
i = 1, carry = 0: 8 x 5 = 40, 40 + 0 = 40 -&amp;gt; Sonuç[1] = 0, carry = 4
i = 2, carry = 4: 3 x 5 = 15, 15 + 4 = 19 -&amp;gt; Sonuç[2] = 9, carry = 1
i = 3, carry = 1: 7 x 5 = 35, 35 + 1 = 36 -&amp;gt; Sonuç[3] = 6, carry 3

Döngü Sonu: Sonuç[4] = 3
Döndüreceğimiz Değer: 36905

   7381
x     5
-- -- --
     05
    40
   15
+ 35
-- -- --
  36905
&lt;/pre&gt;

&lt;p&gt;Son algoritmaya geçmeden önce, yukarıdaki fonksiyonun farklı bir versiyonunu
yazalım. Bu fonksiyonun öncekinden farkı, çarpım sonucunu, &lt;code&gt;result&lt;/code&gt; array'inde
önceden bulunan değerin üstüne ekliyor olması. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// result += op1 * op2&lt;/span&gt;
&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="nf"&gt;bn_muladd_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bn_mul_n11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;bn_add_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Şu ana kadar yazdığımız fonksiyonları kullanarak, m-haneli ve n-haneli sayilari
çarpan fonksiyona geçebiliriz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bn_mul_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_mul_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_muladd_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bu fonksiyonda, önce &lt;code&gt;op2&lt;/code&gt;'nin son hanesi ile, &lt;code&gt;op1&lt;/code&gt;'i çarpıp, sonucu &lt;code&gt;result&lt;/code&gt; array'ine yazıyoruz.
&lt;code&gt;for&lt;/code&gt; döngüsünün her bir adımında, &lt;code&gt;op2&lt;/code&gt; bir sonraki hanesini &lt;code&gt;op1&lt;/code&gt; ile çarparak, &lt;code&gt;result&lt;/code&gt;
array'inin bir sonraki hanesine ekliyoruz. Döngünün her girişinde &lt;code&gt;result&lt;/code&gt; pointer'ını bir artırdığımıza
dikkat edin. Böylece, &lt;code&gt;op2&lt;/code&gt;'nin her hanesinin çarpımını, sonuca kaydırarak eklemiş oluyoruz. Örneğin, onluk
tabanda 565 ile 17'nin çarpımını aşağıdaki gibi hayal edebilirsiniz.&lt;/p&gt;
&lt;pre&gt;
    567
x    17
-- -- -
   3969
+ 0567
-- -- -
  09639
&lt;/pre&gt;

&lt;p&gt;Bir önceki yazıda, egzersiz olarak bıraktığım farklı büyüklükteki doğal sayıları toplama fonksiyonu da şu şekilde yazılabilir&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="nf"&gt;bn_add_nn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_add_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_add_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt; Yukarıdaki fonksiyonun orjinal halinde, &lt;code&gt;bn_add_n1&lt;/code&gt; fonksiyonunun argümanları yanlış sıradaydı. 13.3.2020 tarihinde düzeltildi.&lt;/p&gt;
&lt;h3&gt;Ek Kaynaklar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Knuth D. Art of The Computer Programming Vol 2 Section 4.3.1&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Karatsuba_algorithm"&gt;Karatsuba algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Toom%E2%80%93Cook_multiplication"&gt;Toom–Cook multiplication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;x86 Instruction Set Reference &lt;a href="https://x86.puri.sm/html/file_module_x86_id_210.html"&gt;MUL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-carpma.html</guid><pubDate>Wed, 26 Feb 2020 19:44:00 GMT</pubDate></item><item><title>Büyük Sayı Algoritmaları - Toplama / Çıkarma</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-toplama-cikarma.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Bu yazıda n-haneli iki doğal sayı üzerinde toplama/çıkarma işlemi yapararak,
n-haneli sonuç ve "elde" döndüren algoritmaları inceleyeceğiz. Bu algoritmalar
kağıt/kalem ile yaptığımız toplama çıkarma işlemleriyle oldukça benzer ve ilerleyen
yazılara konu olacak algoritmalara nazaran oldukça temel düzeyde. &lt;a href="http://ysar.net/algoritma/buyuk-sayi-islemleri-giris.html"&gt;Bir önceki yazıda&lt;/a&gt;
tanımlanan veri türlerini kullanacağımız için, önce o yazıyı okumanızı tavsiye ederim. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/buyuk-sayi-islemleri-toplama-cikarma.html"&gt;Devamını oku…&lt;/a&gt; (2 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-toplama-cikarma.html</guid><pubDate>Sun, 23 Feb 2020 15:28:00 GMT</pubDate></item><item><title>Büyük Sayı Algoritmaları - Giriş</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-giris.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;İşlemciler aritmetik işlemleri gerçekleştirken, genellikle 8-64 bit
arasında sayılar üzerinde işlem yapar. Bir program, daha büyük sayılar
üzerinde işlem yapmak için, birden fazla sayıdan oluşan bir array
üzerinde işlem yapabilir. Python programlama dilinde, sınırsız
uzunlukta sayılar üzerinde işlem yapmak, dilin bir özelliği olarak
sunulmuştur. Java'da ve C#'da ise, BigInteger sınıf ile, sınırsız
uzunluktaki sayılar üzerinde işlem yapılabiliyor. Ben de,
&lt;a href="http://ysar.net/euler/euler-13.html"&gt;(Euler 13) C Programlama Dilinde Büyük Sayıları Toplama&lt;/a&gt; 
yazısını yazdığım günden bu yana, C ile büyük sayı
kütüphanesi yazmaya niyetliydim. Geçtiğimiz günlerde,
kısmen de olsa, bunu gerçekleştirebildim.&lt;/p&gt;
&lt;p&gt;İlk yazdığım büyük sayı kütüphanesi, test edebildiğim kadarıyla
doğru çalışmasına rağmen, aynı zamanda oldukça yavaştı. Bu nedenle,
fikir alabilmek adına, &lt;a href="https://gmplib.org/"&gt;GMP&lt;/a&gt; kütüphanesini,
ve &lt;a href="https://github.com/openssl/openssl/tree/master/crypto/bn"&gt;OpenSSL&lt;/a&gt;
kütüphanesinin ilgili bölümlerini inceledim. Her ikisi de,
benim ilk yazdığım kütüphaneye göre oldukça iyi olsa da, ikisi
arasında tercih yapmak gerekirse, GMP'nin tasarımını daha
başarılı buldum.&lt;/p&gt;
&lt;p&gt;Bu yazı ile, GMP'yi örnek olarak olarak C ile yazacağım
büyük sayı kütüphanesini anlatacak bir yazı dizisine başlamak
istiyorum. Burada anlatacağım algoritmalar ve kütüphane, performans
açısından GMP kadar iyi olmayacak. Bunun nedenlerinden aklıma gelen
birkaç tanesi şu şekilde;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GMP kütüphanesi, neredeyse her işlemci mimarisi için ayrı
   ayrı optimize edilmiş assembly kodları içeriyor. Benim
   yazacağım kütüphane sadece C kodlarından oluşacak. İşlemci
   mimarisine uygun kod oluşturma işini C derleyecilerine
   bırakacağım.&lt;/li&gt;
&lt;li&gt;GMP kütüphanesi, her bir işlem için, bilinen en iyi algoritmaları
   kullanıyor. Hatta bazı işlemler için, birkaç farklı algoritma
   içerisinden, sayıların büyüklüğüne göre uygun olan algoritmayı
   seçip kullanıyor. Burada bahsedeceğim algoritmalar, belki
   ufak tefek optimizasyonlar içerse de, en temel seviyedeki
   algoritmalar olacak.&lt;/li&gt;
&lt;li&gt;GMP, her bir platform için, en uygun integer türünü seçip
   kullanıyor. Bunu gerçekleştirebilmek için, derleme
   hedefinin özelliklerini test edebilecek bir build sistemi
   gerekiyor. Düzgün bir build sistemi yapmak başlı başına
   ayrı bir iş olduğundan, ve bu konuya çok hakim olmadığım için,
   platforma özgü veri tipi seçimi yapmayacağım.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GMP kütüphanesi kadar iyi olmayacak olsa da, bir büyük sayı
kütüphanesi geliştirmenin eğitsel değeri olduğuna inanıyorum.&lt;/p&gt;
&lt;h3&gt;Veri Tipleri ve Makrolar&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bn.h&lt;/code&gt; dosyası, büyük sayı kütüphanesinin header dosyası olacak. İlk versiyonu aşağıdaki gibi;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef __BN_H_&lt;/span&gt;
&lt;span class="cp"&gt;#define __BN_H_&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;limits.h&amp;gt; // CHAR_BIT&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;bn_long_digit_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#define BN_DIGIT_BITS ((sizeof(bn_digit_t)) * CHAR_BIT)&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_DIGIT_MAX ((bn_digit_t) ~ (bn_digit_t)0)&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_DIGIT_HI ((bn_digit_t) (1 &amp;lt;&amp;lt; (BN_DIGIT_BITS / 2)))&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_DIGIT_LOWMASK (BN_DIGIT_HI - 1)&lt;/span&gt;

&lt;span class="cp"&gt;#define BN_MAX(a,b) ((a) &amp;gt; (b) ? (a) : (b))&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_MIN(a,b) ((a) &amp;lt; (b) ? (a) : (b))&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_ABS(a) ((a) &amp;gt;= 0 ? (a) : -(a))&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_CMP(a,b) (((a) &amp;gt; (b)) - ((b) &amp;gt; (a)))&lt;/span&gt;


&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Veri tiplerinin anlamları şu şekilde;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bn_size_t&lt;/code&gt;: Uzunluk ile ilgili verileri tutan veri tipi. Bazı fonksiyonlardan
   negatif uzunluk döndürmemiz gerekeceği için, signed 32 bit integer iyi bir tercih olacaktır.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bn_digit_t&lt;/code&gt;: Aritmetik işlemlerde kullanılacak veri tipi. Temel aritmetik
   işlemleri negatif olmayan sayıların üzerinde yapacağımız için, bu veri tipi unsigned olacak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bn_long_digit_t&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin iki katı bit genişliğindeki veri tipi. Genişleyen çarpma
   ve daralan bölme işlemleri için kolaylık sağlayacak.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;bn_digit_t&lt;/code&gt; tipine "digit" adını vermemizin nedeni, bu sayıların &lt;code&gt;2^32&lt;/code&gt;'lik sayı tabanında
bir haneyi ifade etmesi. Örneğin, onluk tabanda işlem yaparken, &lt;code&gt;0..(10-1)&lt;/code&gt; arasındaki
her bir rakam, sayının bir hanesini temsil ediyor. Biz yapacağımız işlemlerde,
&lt;code&gt;0..(2^32 - 1)&lt;/code&gt; arasındaki sayıları tek hane olarak kabul edip işlem yapacağız. Birden fazla
haneden oluşan sayıları ifade etmek için, &lt;code&gt;bn_digit_t[]&lt;/code&gt; veya &lt;code&gt;bn_digit_t*&lt;/code&gt; tiplerini
kullanacağız. Yazacağımız bütün algoritmalar, sayıların little-endian olarak sıralandığı
varsayımıyla çalışacak. Örneğin, &lt;code&gt;2^32&lt;/code&gt;'lik tabandaki &lt;code&gt;bn_digit_t a[3] = {1, 2, 3}&lt;/code&gt; sayısı, 
onluk tabanda &lt;code&gt;1 + 2^32 * 2 + 2 ^ 64 * 3 = 55340232229718589441&lt;/code&gt; sayısına karşılık geliyor.&lt;/p&gt;
&lt;p&gt;Bahsedeceğimiz algoritmaları denerken, veya hata tespiti yapmaya çalışırken, onluk taban
ile &lt;code&gt;2^32&lt;/code&gt;'lik taban arasında sık sık dönüşüm yapma ihtiyacı hissedebilirsiniz. Ben bunu
daha pratik yapabilmek adına aşağıdaki iki python fonksiyonunu kullanıyorum.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to2_32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from2_32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;64 bit aritmetiği destekleyen işlemcilerde, &lt;code&gt;bn_long_digit_t&lt;/code&gt; üzerindeki işlemler, doğrudan
işlemci üzerinde yapılırken, diğer işlemcilerde 64 bit aritmetiği taklit
eden kodları derleyici ekleyecektir. Dolayısıyla, 64 bit işlemcilerde
bir nebze daha iyi bir performans bekleyebiliriz. 64 bit mimarisine sahip işlemciler
için, GCC'nin bazı sürümleri 128 bit integer türünü destekliyor.
Böyle bir platformda kütüphaneyi derlerken, &lt;code&gt;bn_digit_t&lt;/code&gt;'yi 64 bit,
&lt;code&gt;bn_long_digit_t&lt;/code&gt;'yi 128 bit olarak ayarlayabilirsiniz. 128 bit aritmetiği
desteklemeyen platformlar için, 128 bit aritmetiği kendimiz taklit edebiliriz.
Çarpma ve Bölme ile ilgili yazılarda, bununla ilgili bir bölüm olacak.&lt;/p&gt;
&lt;p&gt;Makrolar oldukça standart, bu nedenle, kısaca bahsedip geçeceğim;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BN_DIGIT_BITS&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin bit genişliği. Yukarıdaki örnekte bu makro 32 değerini alacak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_DIGIT_MAX&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin alabileceği en büyük değer. Yukarıdaki örnekte &lt;code&gt;2^32 - 1&lt;/code&gt; (diğer bir ifadeyle &lt;code&gt;0xFFFFFFFF&lt;/code&gt;) değerini alacak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_DIGIT_HI&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin, üst yarısının, alt biti. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_DIGIT_LOWMASK&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin alt yarısını elde etmeye yarayan maske.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_MAX&lt;/code&gt;, &lt;code&gt;BN_MIN&lt;/code&gt; : iki sayının büyük ve küçük olanını seçmeye yarayan makrolar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_ABS&lt;/code&gt; : Bir sayının mutlak değerini döndürür. Standart C kütüphanesinde &lt;code&gt;abs&lt;/code&gt; fonksiyonu olsa da, bu fonksiyonun
              inline derlenme garantisi yok. Ekstra fonksiyon çağrısına gerek bırakmamak için, bu makroyu tercih edeceğiz.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_CMP&lt;/code&gt; : İki sayıyı karşılaştır. İlk sayı ikinci sayıdan büyükse 1, küçükse -1, eşitse 0 döndürür.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bir sonraki yazıda, negatif olmayan tamsayılar üzerinde toplama ve çıkarma fonksiyonlarını tanımlayacağız.&lt;/p&gt;
&lt;h3&gt;Ek Kaynaklar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Eli Bendersky's website
: &lt;a href="https://eli.thegreenplace.net/2010/10/21/64-bit-types-and-arithmetic-on-32-bit-cpus"&gt;64-bit types and arithmetic on 32-bit CPUs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC Documentation: &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Long-Long.html#Long-Long"&gt;Double-Word Integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GNU MP Manual: &lt;a href="https://gmplib.org/manual/Introduction-to-GMP.html#Introduction-to-GMP"&gt;Introduction to GNU MP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/128-bit_computing"&gt;128-bit computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Endianness"&gt;Endianness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic"&gt;Arbitrary-precision arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-giris.html</guid><pubDate>Sat, 22 Feb 2020 17:35:00 GMT</pubDate></item><item><title>Programlamaya JavaScript ile Başlamak İçin 6 Neden</title><link>http://ysar.net/yazilim-dunyasi/javascript-ile-baslamak-icin-6-neden.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Hobi olarak programlama öğrenmek isteyenler veya programlamaya bir yerden başlayıp, zaman içinde
meslek haline getirmek isteyenler, zaman zaman e-posta yolu ile bana ulaşıp, hangi programlama diliyle
başlamaları gerektiği konusunda fikir almak istiyorlar. Bugüne kadar, bazen C, bazen de Python lehine
tavsiye veriyordum. Son zamanlarda, JavaScript'in başlangıç dili olmaya çok müsait olduğu konusunda
giderek kuvvetlenen bir kanaat geliştirdim. Neden böyle düşündüğümü, 6 madde halinde sizlerle paylaşmak istedim.&lt;/p&gt;
&lt;h2&gt;Şimdi Başlayabilirsiniz&lt;/h2&gt;
&lt;p&gt;Eğer bu yazıyı şahsi bilgisayarınızdaki bir web tarayıcı üzerinden okuyorsanız, JavaScript
kodlamaya hemen başlayabilirsiniz. JavaScript ile programlamaya başlamak için, diğer dillerde
olduğu gibi, geliştiricilere yönelik araç/gereçlerin kurulumuna ihtiyacınız yok. Bir metin
düzenleyici (notepad, gedit, textedit gibi) ve web tarayıcı işinizi görecektir.&lt;/p&gt;
&lt;h2&gt;Platform Özgürlüğü&lt;/h2&gt;
&lt;p&gt;JavaScript kodlarınız tarayıcıda çalışacağı için, derleyici/yorumlayıcı sürümleri,
işletim sistemi veya işlemci mimarisi
gibi platformlar arasındaki farklılıklarla dikkatinizi bölmenize gerek kalmayacak. Tarayıcılar
arasında da birtakım farklılıklar olabilse de, bunlar öğrenme aşamasında engel olacak konular değil.&lt;/p&gt;
&lt;h2&gt;Otomatik Hafıza Yönetimi&lt;/h2&gt;
&lt;p&gt;Bu özellik çoğu modern dil için de geçerli, ama, JavaScript özelinde
tekrar etmekte fayda var. Hafızada yer ayırmak, işi bittikten sonra
hafızayı iade etmek gibi işler JavaScript tarafından kontrol ediliyor.
Ayrıca, kullanacağınız değişkenlerin veri tiplerini de açıkla belirtmek zorunda değilsiniz.
Bu sayede, doğrudan
aritmetik işlemler, fonksiyonlar, döngüler, koşullu ifadeler gibi programlama
konularına geçebilir, hızlı deneme/yanılma süreci sayesinde, kendinizi geliştirebilirsiniz.&lt;/p&gt;
&lt;h2&gt;Arayüz Programlama&lt;/h2&gt;
&lt;p&gt;Python/C/Java gibi dillerle programlama öğrenmeye başlayan biri, neredeyse her zaman
konsol programları yaparak başlar. Konsol programlarının gerekliliği ve faydası
tartışmaya açık olmamakla birlikte, programlamaya yeni başlayanların, özellikle de
hobi olarak programlama öğrenmek isteyenlerin hayalinde konsol uygulamaları yapmaktan
ziyade, arayüzü olan interaktif programlar yapmak var. İnternetin programlama dili
olan JavaScript, HTML/CSS ile birlikte, arayüzü olan interaktif uygulamalar yapmaya
çok elverişli. O kadar elverişli ki, bazı masaüstü programları bile, programın içine
gömülü web tarayıcı sayesinde HTML/JavaScript ile kodlanıyor.&lt;/p&gt;
&lt;h2&gt;Güvenli Ortam&lt;/h2&gt;
&lt;p&gt;Acemi programcının, bilgisayara zarar verme endişesi taşımasına gerek yok. JavaScript
ile aşırı RAM/CPU kullanımı neticesinde tarayıcıyı veya tüm bilgisayarı kilitleme
riski olsa da, istemeden binlerce dosyayı silme, binlerce dosya oluşturma, bilgisayar
ayarlarında zararlı değişiklikler yapma gibi potansiyel riskler sıfıra yakın.&lt;/p&gt;
&lt;h2&gt;Diğer Dillerle Benzerliği&lt;/h2&gt;
&lt;p&gt;JavaScript grameri, koşullu ifadeleri, döngüleri gibi özellikleri C/C++/Java/C#
gibi dillere çok yakın. JavaScript yazarken edindiğiniz alışkanlıkları, bu dillere
geçerken yanınızda götürebilirsiniz.&lt;/p&gt;
&lt;h2&gt;İkna Oldum, Şimdi Ne Yapmalıyım?&lt;/h2&gt;
&lt;p&gt;Boş bir metin dosyası oluşturun, aşağıdaki satırları yapıştırın, ve &lt;code&gt;.html&lt;/code&gt; uzantısı ile
kaydedin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"metin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    document.getElementById("metin").innerText = "Merhaba Dünya!"
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;İlk JavaScript programınızı bir tarayıcıda test etmeye hazırsınız. Belki bugün
programlama maceranızın bir başlangıcı olur.&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/yazilim-dunyasi/javascript-ile-baslamak-icin-6-neden.html</guid><pubDate>Thu, 04 Jul 2019 20:05:00 GMT</pubDate></item><item><title>Çengel Bulmaca</title><link>http://ysar.net/diger/cengel-bulmaca-1.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Bir aralar çengel bulmacak yapmaya merak salmıştım. O zamanlardan kalan bir çalışma.&lt;/p&gt;
&lt;style id="Kitap31_17974_Styles"&gt;
&lt;!--table
    {mso-displayed-decimal-separator:"\,";
    mso-displayed-thousand-separator:"\.";}
.xl1517974
    {padding-top:1px;
    padding-right:1px;
    padding-left:1px;
    mso-ignore:padding;
    color:black;
    font-size:11.0pt;
    font-weight:400;
    font-style:normal;
    text-decoration:none;
    font-family:Calibri, sans-serif;
    mso-font-charset:162;
    mso-number-format:General;
    text-align:general;
    vertical-align:bottom;
    mso-background-source:auto;
    mso-pattern:auto;
    white-space:nowrap;}
.xl6317974
    {padding-top:1px;
    padding-right:1px;
    padding-left:1px;
    mso-ignore:padding;
    color:#827A4A;
    font-size:10.0pt;
    font-weight:700;
    font-style:normal;
    text-decoration:none;
    font-family:Arial, sans-serif;
    mso-font-charset:162;
    mso-number-format:General;
    text-align:left;
    vertical-align:top;
    border:.5pt solid windowtext;
    mso-background-source:auto;
    mso-pattern:auto;
    white-space:nowrap;}
.xl6417974
    {padding-top:1px;
    padding-right:1px;
    padding-left:1px;
    mso-ignore:padding;
    color:#EEECE1;
    font-size:6.0pt;
    font-weight:700;
    font-style:normal;
    text-decoration:none;
    font-family:Arial, sans-serif;
    mso-font-charset:162;
    mso-number-format:General;
    text-align:left;
    vertical-align:top;
    border:.5pt solid windowtext;
    background:black;
    mso-pattern:black none;
    white-space:nowrap;}
--&gt;
&lt;/style&gt;

&lt;table border="0" cellpadding="0" cellspacing="0" width="459" style="border-collapse:
 collapse;table-layout:fixed;width:342pt"&gt;
 &lt;col width="51" span="9" style="mso-width-source:userset;mso-width-alt:1820;
 width:38pt"&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" width="51" style="height:38.4pt;width:38pt"&gt;1&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;18&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;19&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;20&lt;/td&gt;
  &lt;td class="xl6417974" width="51" style="border-left:none;width:38pt"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;2&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;24&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;25&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;27&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;3&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;4&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;5&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;6&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6417974" style="height:38.4pt;border-top:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;7&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;22&lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;8&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6417974" style="height:38.4pt;border-top:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;9&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;23&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;10&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;11&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;12&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;21&lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;13&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;26&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;28&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;14&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;15&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;16&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;17&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 
 &lt;tr height="0" style="display:none"&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 
&lt;/table&gt;

&lt;div style="position: relative; width: 100%; margin-top:1em"&gt;
    &lt;div style="float: left; width: 45%; padding: 1em"&gt;
            &lt;h6 style="font-size:1.4em;border-bottom: 1px solid black"&gt;Soldan Sağa&lt;/h6&gt;
    &lt;/div&gt;
    &lt;div style="float: left; width: 45%; padding: 1em"&gt;
        &lt;h6 style="font-size:1.4em;border-bottom: 1px solid black"&gt;Yukarıdan Aşağıya&lt;/h6&gt;
    &lt;/div&gt;

    &lt;div style="float: left; width: 45%; padding: 1em"&gt;

        &lt;div&gt;1) Aynı zamanda bir fiil çekimi olan rakam&lt;/div&gt;
        &lt;div&gt;2) Kendi kendine verilen söz, ahit&lt;/div&gt;
        &lt;div&gt;3) Bozkır&lt;/div&gt;
        &lt;div&gt;4) Mevsimi dışında bitki yetiştirmek için hazırlanan kapalı alan&lt;/div&gt;
        &lt;div&gt;5) Genellikle iltihaba bağlı olarak vücutta gelişen şişlik veya yumru&lt;/div&gt;
        &lt;div&gt;6) Elektrik yüklü atom&lt;/div&gt;
        &lt;div&gt;7) İçine su koyulan metal kap&lt;/div&gt;
        &lt;div&gt;8) (Kısa) Vücutta kas ve sinir hastalıkları teşhisinde kullanılan bir yöntem&lt;/div&gt;
        &lt;div&gt;9) Şu an çözdüğünüz&lt;/div&gt;
        &lt;div&gt;10) Küp şeklinde rasgele sayı üretici&lt;/div&gt;
        &lt;div&gt;11) Jamaika kökenli bir müzik türü&lt;/div&gt;
        &lt;div&gt;12) ______-Gaz, metalcilikte kullanılan bir kaynak yöntemi&lt;/div&gt;
        &lt;div&gt;13) Ölmüş birini hatırlamak için yapılan tören&lt;/div&gt;
        &lt;div&gt;14) Üstü açık boru&lt;/div&gt;
        &lt;div&gt;15) Erkek incir&lt;/div&gt;
        &lt;div&gt;16) Gözümde canlanır koskoca ______?&lt;/div&gt;
        &lt;div&gt;17) Sesin ayırt edici özelliği&lt;/div&gt;
    &lt;/div&gt;
    &lt;div style="float:left; width: 45%;clear: right; border-left: 2px dotted black; padding: 1em"&gt;

        &lt;div&gt;1) (Kısa) Yüksek Seçim Kurulu&lt;/div&gt;
        &lt;div&gt;10) Odak uzaklığı sabit olmayan lens türü&lt;/div&gt;
        &lt;div&gt;18) Hitit&lt;/div&gt;
        &lt;div&gt;9) _____giller, yeşil kabuklu ve taneli bir bitki familyası&lt;/div&gt;

        &lt;div&gt;19) İzinsiz&lt;/div&gt;
        &lt;div&gt;20) _____ etmek, bozmak, geri çekmek, geçersiz kılmak&lt;/div&gt;
        &lt;div&gt;21) Simetrik rakam&lt;/div&gt;
        &lt;div&gt;22) Cep telefonunda kısa mesaj&lt;/div&gt;
        &lt;div&gt;2) İsyan eden&lt;/div&gt;
        &lt;div&gt;23) Bir dinde öğrenilmesi gerekli görülen bilgilerin tümü&lt;/div&gt;
        &lt;div&gt;24) Öfkeli, telaşlı veya coşkulu&lt;/div&gt;
        &lt;div&gt;25) Güzel koku&lt;/div&gt;
        &lt;div&gt;26) _____ etmek, engel olmak, yasaklamak&lt;/div&gt;
        &lt;div&gt;27) Meyve aromalı bir toz içeçek&lt;/div&gt;
        &lt;div&gt;28) Yumurtanın beyazı&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://ysar.net/diger/cengel-bulmaca-1.html</guid><pubDate>Tue, 02 Jul 2019 20:12:00 GMT</pubDate></item></channel></rss>