<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>YSAR.NET</title><link>http://ysar.net/</link><description>Yaşar Arabacı İnternet Günlüğü</description><atom:link href="http://ysar.net/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>tr</language><lastBuildDate>Tue, 03 Mar 2020 22:34:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Rastgele Sayı Üretici</title><link>http://ysar.net/algoritma/rastgele-sayi-uretici.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Merhabalar,&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic"&gt;Multi-precision&lt;/a&gt; doğal sayılarda bölme yapan bir fonksiyonu test etmek için, C'deki &lt;code&gt;rand()&lt;/code&gt;
fonksiyonu ile rastgele sayı oluştururken, oluşturduğum sayıların
yeterince rastgele olmadığına (artık o ne demekse) karar verdim. Fonksiyon içinde, çok
nadiren de olsa çalışması gereken bir &lt;code&gt;if&lt;/code&gt; bloguna, milyarlarca sayı üretmeme rağmen girememiştim.
Hal böyle olunca, C'deki &lt;code&gt;rand()&lt;/code&gt;
fonksiyonuna alternatif olarak, &lt;a href="https://en.wikipedia.org/wiki/RC4"&gt;RC4&lt;/a&gt; tabanlı
bir rastgele sayı üretici oluşturdum.&lt;/p&gt;
&lt;p&gt;Bu rastgele sayı üreticinin özelliği, küçük sayılara daha fazla ağırlık veriyor olması. Dolayısı ile,
uniform dağılımda sayılar üretmiyor. Kriptografi alanında kullanılmaması gerektiğini de özellikle
vurgulamak istiyorum. Kodlar aşağıdaki gibi;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#if defined(__GNUC__)&lt;/span&gt;
&lt;span class="cp"&gt;#define nlz(x) __builtin_clz(x)&lt;/span&gt;
&lt;span class="cp"&gt;#elif defined(_MSC_VER)&lt;/span&gt;
&lt;span class="cp"&gt;#define nlz(x) __lzcnt(x)&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;nlz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;rngstate&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;rngstate&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init_rng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;keysize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;keysize&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="nf"&gt;myarc4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;RNGSTATE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fill_random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myarc4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;_nlz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_nlz&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_nlz&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;shift&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myarc4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;_nlz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nlz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Burada kullanmak isteyebileceğiniz iki fonksiyon var; &lt;code&gt;fill_random&lt;/code&gt; ve &lt;code&gt;myarc4&lt;/code&gt;. &lt;code&gt;myarc4&lt;/code&gt; fonksiyonu
RC4 şifrelemeden esinlenerek(!) yazdım. Her çağrıldığında, rastgele 8 bit bir değer döndürüyor. Ancak,
fonksiyonu kullanmadan önce, program başlangıcında bir kez &lt;code&gt;init_rng&lt;/code&gt; fonksiyonunu çağırmanız gerekiyor.
Argüman olarak statik bir string verirseniz, her seferinde aynı sayıları üretir. Eğer istediğiniz bu değilse,
&lt;code&gt;key&lt;/code&gt; olarak kullanılacak string'i &lt;code&gt;/dev/urandom&lt;/code&gt;'u okuyarak veya &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptgenrandom"&gt;CryptGenRandom&lt;/a&gt;
 fonksiyonunu kullanarak oluşturup, bununla birlikte &lt;code&gt;init_rng&lt;/code&gt;
fonksiyonunu çağırabilirsiniz.&lt;/p&gt;
&lt;p&gt;Herhangi uzunluktaki 32bit integer array'ini rastgele sayılarla doldurmak için, &lt;code&gt;fill_random&lt;/code&gt; fonksiyonu
kullanabilirsiniz. İlk argüman olarak array'i, ikinci argüman olarak da array uzunluğunu göndermeniz gerekiyor.
Yukarıda da bahsettiğim gibi, burada oluşacak sayılar, sıfıra doğru meyilli. Yaklaşık olarak 1/32 ihtimalle 0,
1/32 ihtimalle 1, 1/64 ihtimalle 2 ve 3 döndürmesini bekleyebilirsiniz. &lt;/p&gt;
&lt;p&gt;Standart kütüphanedeki &lt;code&gt;rand()&lt;/code&gt; fonksiyonuna nazaran oldukça yavaş kalabilir, ama, farklı bir dağılıma
sahip rastgele sayılar üretmek isterseniz işinize yarayabileceğini düşünüyorum.&lt;/p&gt;
&lt;p&gt;Kriptografi için kullanılmaması gerektiğini tekrar hatırlatayım.&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/algoritma/rastgele-sayi-uretici.html</guid><pubDate>Tue, 03 Mar 2020 22:28:00 GMT</pubDate></item><item><title>Büyük Sayı Algoritmaları - Çarpma</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-carpma.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/buyuk-sayi-islemleri-toplama-cikarma.html"&gt;Bir önceki yazıda&lt;/a&gt;, n-haneli doğal sayılar üzerinde toplama
çıkarma algoritmalarından bahsetmiştik. Bu yazıda m-haneli doğal sayılar ile n-haneli doğal sayılar arasında
çarpma işlemi yapan bir algoritmayı inceleyeceğiz. Bu algoritmanın ön çalışması olarak, bir haneli iki
sayı çarparak, iki haneli sonuç döndüren bir fonksiyon yazacağız. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bn_mul_n11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op1_h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op1_l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;BN_DIGIT_LOWMASK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2_h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2_l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;BN_DIGIT_LOWMASK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1_l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;op2_l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1_l&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;op2_h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1_h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;op2_l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;p4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1_h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;op2_h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// carry&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;p4&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;BN_DIGIT_HI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;BN_DIGIT_LOWMASK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BN_DIGIT_BITS&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;32 bit iki sayının çarpımı, 64 bite kadar sonuç verebileceği için, 32 bitlik
çarpanları, 16 bitlik parçalara bölüp, parçaları ikişerli olarak çarpıp,
elde ettiğimiz sonuçları farklı oranlarda kaydırarak toplayıp, 2 haneli bir
sonuç elde edebilir. Kaydırma oranlarıyla ilgili olarak, aşağıdaki tabloyu
inceleyebilirsiniz.&lt;/p&gt;
&lt;pre&gt;
64      48      32      16      0
+---------------+-------+-------+
|op1_h x op2_h  |       |       |
+-------+-------+-------+-------+
|       |op1_h x op2_l  |       |
+-------+---------------+-------+
|       |op1_l x op2_h  |       |
+-------+-------+-------+-------+
|               |op1_l x op2_l  |
+---------------+---------------+
&lt;/pre&gt;

&lt;p&gt;Bunun neden işe yaradığını anlamak için, 32 bit \(u\) ve \(v\) sayılarını çarptığımızı
varsayalım. \(u_h\) sayının 16 bitlik üst kısmını, \(u_l\) ise sayının 16 bitlik alt kısmını
temsil etsin.&lt;/p&gt;
&lt;div&gt;
$$
\begin{align}
u &amp;amp; = 2^{16} * u_h + u_l \\
v &amp;amp; = 2^{16} * v_h + v_l \\
u * v &amp;amp; = (2^{16} * u_h + u_l) * (2^{16} * v_h + v_l) \\
 &amp;amp; = 2^{32} * u_h * v_h + 2^{16} * u_h * v_l + 2^{16} * v_h * u_l + u_l * v_l \\
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;Yukarıdaki fonksiyon genel olarak genişleyen (argümanlarından geniş sonuç veren) çarpma
işlemlerinde kullanılabilir. Ancak, birçok modern 32 bit işlemci, 64 bit sonuç verebiliyor.
64 bit işlemcilerde zaten böyle bir sorunumuz olmadığı için, aşağıdaki fonksiyon çoğunlukla
yukarıdakinden daha iyi bir performans verecektir.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bn_mul_n11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bn_long_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;rl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bn_long_digit_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bn_long_digit_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;1-hane x 1-hane çarpımı yaptıktan sonra, n-hane x 1-hane çarpımına geçebiliriz. Bir önceki yazıda egzersiz
olarak bıraktığım, n-haneli ve 1 haneli toplamı fonksiyonunu da burada tanımlıyorum.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="nf"&gt;bn_add_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="nf"&gt;bn_mul_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bn_mul_n11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;bn_add_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// bu carry döndüremez, döndürmemeli&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Burada &lt;code&gt;for&lt;/code&gt; döngüsünün her bir adımında, &lt;code&gt;op1&lt;/code&gt;'in bir hanesi ile, &lt;code&gt;op2&lt;/code&gt;'yi
çarpıyoruz. Bu çarpım bize 2 haneli bir sonuç veriyor. Bu sonuca, bir önceki
döngüden devir aldığımız sayıyı ekliyoruz. Elde ettiğimiz sonucun küçük hanesini
sonuç olarak yazıp, büyük hanesini bir sonraki döngü adımına devrediyoruz. Aynı
algoritmanın, onluk tabanda 7381 ile 5 arasında uygulanmış halini aşağıdaki
gibi çalışacaktır.&lt;/p&gt;
&lt;pre&gt;
i = 0, carry = 0: 1 x 5 = 5, 5 + 0 = 5 -&amp;gt; Sonuç[0] = 5, carry = 0
i = 1, carry = 0: 8 x 5 = 40, 40 + 0 = 40 -&amp;gt; Sonuç[1] = 0, carry = 4
i = 2, carry = 4: 3 x 5 = 15, 15 + 4 = 19 -&amp;gt; Sonuç[2] = 9, carry = 1
i = 3, carry = 1: 7 x 5 = 35, 35 + 1 = 36 -&amp;gt; Sonuç[3] = 6, carry 3

Döngü Sonu: Sonuç[4] = 3
Döndüreceğimiz Değer: 36905

   7381
x     5
-- -- --
     05
    40
   15
+ 35
-- -- --
  36905
&lt;/pre&gt;

&lt;p&gt;Son algoritmaya geçmeden önce, yukarıdaki fonksiyonun farklı bir versiyonunu
yazalım. Bu fonksiyonun öncekinden farkı, çarpım sonucunu, &lt;code&gt;result&lt;/code&gt; array'inde
önceden bulunan değerin üstüne ekliyor olması. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// result += op1 * op2&lt;/span&gt;
&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="nf"&gt;bn_muladd_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bn_mul_n11&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;bn_add_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Şu ana kadar yazdığımız fonksiyonları kullanarak, m-haneli ve n-haneli sayilari
çarpan fonksiyona geçebiliriz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bn_mul_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_mul_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_muladd_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bu fonksiyonda, önce &lt;code&gt;op2&lt;/code&gt;'nin son hanesi ile, &lt;code&gt;op1&lt;/code&gt;'i çarpıp, sonucu &lt;code&gt;result&lt;/code&gt; array'ine yazıyoruz.
&lt;code&gt;for&lt;/code&gt; döngüsünün her bir adımında, &lt;code&gt;op2&lt;/code&gt; bir sonraki hanesini &lt;code&gt;op1&lt;/code&gt; ile çarparak, &lt;code&gt;result&lt;/code&gt;
array'inin bir sonraki hanesine ekliyoruz. Döngünün her girişinde &lt;code&gt;result&lt;/code&gt; pointer'ını bir artırdığımıza
dikkat edin. Böylece, &lt;code&gt;op2&lt;/code&gt;'nin her hanesinin çarpımını, sonuca kaydırarak eklemiş oluyoruz. Örneğin, onluk
tabanda 565 ile 17'nin çarpımını aşağıdaki gibi hayal edebilirsiniz.&lt;/p&gt;
&lt;pre&gt;
    567
x    17
-- -- -
   3969
+ 0567
-- -- -
  09639
&lt;/pre&gt;

&lt;p&gt;Bir önceki yazıda, egzersiz olarak bıraktığım farklı büyüklükteki doğal sayıları toplama fonksiyonu da şu şekilde yazılabilir&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="nf"&gt;bn_add_nn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;bn_digit_t&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_add_n&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bn_add_n1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Ek Kaynaklar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Knuth D. Art of The Computer Programming Vol 2 Section 4.3.1&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Karatsuba_algorithm"&gt;Karatsuba algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Toom%E2%80%93Cook_multiplication"&gt;Toom–Cook multiplication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;x86 Instruction Set Reference &lt;a href="https://x86.puri.sm/html/file_module_x86_id_210.html"&gt;MUL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-carpma.html</guid><pubDate>Wed, 26 Feb 2020 19:44:00 GMT</pubDate></item><item><title>Büyük Sayı Algoritmaları - Toplama / Çıkarma</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-toplama-cikarma.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Bu yazıda n-haneli iki doğal sayı üzerinde toplama/çıkarma işlemi yapararak,
n-haneli sonuç ve "elde" döndüren algoritmaları inceleyeceğiz. Bu algoritmalar
kağıt/kalem ile yaptığımız toplama çıkarma işlemleriyle oldukça benzer ve ilerleyen
yazılara konu olacak algoritmalara nazaran oldukça temel düzeyde. &lt;a href="http://ysar.net/algoritma/buyuk-sayi-islemleri-giris.html"&gt;Bir önceki yazıda&lt;/a&gt;
tanımlanan veri türlerini kullanacağımız için, önce o yazıyı okumanızı tavsiye ederim. &lt;/p&gt;&lt;p&gt;&lt;a href="http://ysar.net/algoritma/buyuk-sayi-islemleri-toplama-cikarma.html"&gt;Devamını oku…&lt;/a&gt; (2 dakikalık okuma)&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-toplama-cikarma.html</guid><pubDate>Sun, 23 Feb 2020 15:28:00 GMT</pubDate></item><item><title>Büyük Sayı Algoritmaları - Giriş</title><link>http://ysar.net/algoritma/buyuk-sayi-islemleri-giris.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;İşlemciler aritmetik işlemleri gerçekleştirken, genellikle 8-64 bit
arasında sayılar üzerinde işlem yapar. Bir program, daha büyük sayılar
üzerinde işlem yapmak için, birden fazla sayıdan oluşan bir array
üzerinde işlem yapabilir. Python programlama dilinde, sınırsız
uzunlukta sayılar üzerinde işlem yapmak, dilin bir özelliği olarak
sunulmuştur. Java'da ve C#'da ise, BigInteger sınıf ile, sınırsız
uzunluktaki sayılar üzerinde işlem yapılabiliyor. Ben de,
&lt;a href="http://ysar.net/euler/euler-13.html"&gt;(Euler 13) C Programlama Dilinde Büyük Sayıları Toplama&lt;/a&gt; 
yazısını yazdığım günden bu yana, C ile büyük sayı
kütüphanesi yazmaya niyetliydim. Geçtiğimiz günlerde,
kısmen de olsa, bunu gerçekleştirebildim.&lt;/p&gt;
&lt;p&gt;İlk yazdığım büyük sayı kütüphanesi, test edebildiğim kadarıyla
doğru çalışmasına rağmen, aynı zamanda oldukça yavaştı. Bu nedenle,
fikir alabilmek adına, &lt;a href="https://gmplib.org/"&gt;GMP&lt;/a&gt; kütüphanesini,
ve &lt;a href="https://github.com/openssl/openssl/tree/master/crypto/bn"&gt;OpenSSL&lt;/a&gt;
kütüphanesinin ilgili bölümlerini inceledim. Her ikisi de,
benim ilk yazdığım kütüphaneye göre oldukça iyi olsa da, ikisi
arasında tercih yapmak gerekirse, GMP'nin tasarımını daha
başarılı buldum.&lt;/p&gt;
&lt;p&gt;Bu yazı ile, GMP'yi örnek olarak olarak C ile yazacağım
büyük sayı kütüphanesini anlatacak bir yazı dizisine başlamak
istiyorum. Burada anlatacağım algoritmalar ve kütüphane, performans
açısından GMP kadar iyi olmayacak. Bunun nedenlerinden aklıma gelen
birkaç tanesi şu şekilde;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GMP kütüphanesi, neredeyse her işlemci mimarisi için ayrı
   ayrı optimize edilmiş assembly kodları içeriyor. Benim
   yazacağım kütüphane sadece C kodlarından oluşacak. İşlemci
   mimarisine uygun kod oluşturma işini C derleyecilerine
   bırakacağım.&lt;/li&gt;
&lt;li&gt;GMP kütüphanesi, her bir işlem için, bilinen en iyi algoritmaları
   kullanıyor. Hatta bazı işlemler için, birkaç farklı algoritma
   içerisinden, sayıların büyüklüğüne göre uygun olan algoritmayı
   seçip kullanıyor. Burada bahsedeceğim algoritmalar, belki
   ufak tefek optimizasyonlar içerse de, en temel seviyedeki
   algoritmalar olacak.&lt;/li&gt;
&lt;li&gt;GMP, her bir platform için, en uygun integer türünü seçip
   kullanıyor. Bunu gerçekleştirebilmek için, derleme
   hedefinin özelliklerini test edebilecek bir build sistemi
   gerekiyor. Düzgün bir build sistemi yapmak başlı başına
   ayrı bir iş olduğundan, ve bu konuya çok hakim olmadığım için,
   platforma özgü veri tipi seçimi yapmayacağım.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GMP kütüphanesi kadar iyi olmayacak olsa da, bir büyük sayı
kütüphanesi geliştirmenin eğitsel değeri olduğuna inanıyorum.&lt;/p&gt;
&lt;h3&gt;Veri Tipleri ve Makrolar&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bn.h&lt;/code&gt; dosyası, büyük sayı kütüphanesinin header dosyası olacak. İlk versiyonu aşağıdaki gibi;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifndef __BN_H_&lt;/span&gt;
&lt;span class="cp"&gt;#define __BN_H_&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;limits.h&amp;gt; // CHAR_BIT&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="n"&gt;bn_size_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;bn_digit_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;uint64_t&lt;/span&gt; &lt;span class="n"&gt;bn_long_digit_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#define BN_DIGIT_BITS ((sizeof(bn_digit_t)) * CHAR_BIT)&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_DIGIT_MAX ((bn_digit_t) ~ (bn_digit_t)0)&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_DIGIT_HI ((bn_digit_t) (1 &amp;lt;&amp;lt; (BN_DIGIT_BITS / 2)))&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_DIGIT_LOWMASK (BN_DIGIT_HI - 1)&lt;/span&gt;

&lt;span class="cp"&gt;#define BN_MAX(a,b) ((a) &amp;gt; (b) ? (a) : (b))&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_MIN(a,b) ((a) &amp;lt; (b) ? (a) : (b))&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_ABS(a) ((a) &amp;gt;= 0 ? (a) : -(a))&lt;/span&gt;
&lt;span class="cp"&gt;#define BN_CMP(a,b) (((a) &amp;gt; (b)) - ((b) &amp;gt; (a)))&lt;/span&gt;


&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Veri tiplerinin anlamları şu şekilde;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bn_size_t&lt;/code&gt;: Uzunluk ile ilgili verileri tutan veri tipi. Bazı fonksiyonlardan
   negatif uzunluk döndürmemiz gerekeceği için, signed 32 bit integer iyi bir tercih olacaktır.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bn_digit_t&lt;/code&gt;: Aritmetik işlemlerde kullanılacak veri tipi. Temel aritmetik
   işlemleri negatif olmayan sayıların üzerinde yapacağımız için, bu veri tipi unsigned olacak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bn_long_digit_t&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin iki katı bit genişliğindeki veri tipi. Genişleyen çarpma
   ve daralan bölme işlemleri için kolaylık sağlayacak.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;bn_digit_t&lt;/code&gt; tipine "digit" adını vermemizin nedeni, bu sayıların &lt;code&gt;2^32&lt;/code&gt;'lik sayı tabanında
bir haneyi ifade etmesi. Örneğin, onluk tabanda işlem yaparken, &lt;code&gt;0..(10-1)&lt;/code&gt; arasındaki
her bir rakam, sayının bir hanesini temsil ediyor. Biz yapacağımız işlemlerde,
&lt;code&gt;0..(2^32 - 1)&lt;/code&gt; arasındaki sayıları tek hane olarak kabul edip işlem yapacağız. Birden fazla
haneden oluşan sayıları ifade etmek için, &lt;code&gt;bn_digit_t[]&lt;/code&gt; veya &lt;code&gt;bn_digit_t*&lt;/code&gt; tiplerini
kullanacağız. Yazacağımız bütün algoritmalar, sayıların little-endian olarak sıralandığı
varsayımıyla çalışacak. Örneğin, &lt;code&gt;2^32&lt;/code&gt;'lik tabandaki &lt;code&gt;bn_digit_t a[3] = {1, 2, 3}&lt;/code&gt; sayısı, 
onluk tabanda &lt;code&gt;1 + 2^32 * 2 + 2 ^ 64 * 3 = 55340232229718589441&lt;/code&gt; sayısına karşılık geliyor.&lt;/p&gt;
&lt;p&gt;Bahsedeceğimiz algoritmaları denerken, veya hata tespiti yapmaya çalışırken, onluk taban
ile &lt;code&gt;2^32&lt;/code&gt;'lik taban arasında sık sık dönüşüm yapma ihtiyacı hissedebilirsiniz. Ben bunu
daha pratik yapabilmek adına aşağıdaki iki python fonksiyonunu kullanıyorum.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to2_32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;from2_32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;64 bit aritmetiği destekleyen işlemcilerde, &lt;code&gt;bn_long_digit_t&lt;/code&gt; üzerindeki işlemler, doğrudan
işlemci üzerinde yapılırken, diğer işlemcilerde 64 bit aritmetiği taklit
eden kodları derleyici ekleyecektir. Dolayısıyla, 64 bit işlemcilerde
bir nebze daha iyi bir performans bekleyebiliriz. 64 bit mimarisine sahip işlemciler
için, GCC'nin bazı sürümleri 128 bit integer türünü destekliyor.
Böyle bir platformda kütüphaneyi derlerken, &lt;code&gt;bn_digit_t&lt;/code&gt;'yi 64 bit,
&lt;code&gt;bn_long_digit_t&lt;/code&gt;'yi 128 bit olarak ayarlayabilirsiniz. 128 bit aritmetiği
desteklemeyen platformlar için, 128 bit aritmetiği kendimiz taklit edebiliriz.
Çarpma ve Bölme ile ilgili yazılarda, bununla ilgili bir bölüm olacak.&lt;/p&gt;
&lt;p&gt;Makrolar oldukça standart, bu nedenle, kısaca bahsedip geçeceğim;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BN_DIGIT_BITS&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin bit genişliği. Yukarıdaki örnekte bu makro 32 değerini alacak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_DIGIT_MAX&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin alabileceği en büyük değer. Yukarıdaki örnekte &lt;code&gt;2^32 - 1&lt;/code&gt; (diğer bir ifadeyle &lt;code&gt;0xFFFFFFFF&lt;/code&gt;) değerini alacak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_DIGIT_HI&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin, üst yarısının, alt biti. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_DIGIT_LOWMASK&lt;/code&gt;: &lt;code&gt;bn_digit_t&lt;/code&gt;'nin alt yarısını elde etmeye yarayan maske.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_MAX&lt;/code&gt;, &lt;code&gt;BN_MIN&lt;/code&gt; : iki sayının büyük ve küçük olanını seçmeye yarayan makrolar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_ABS&lt;/code&gt; : Bir sayının mutlak değerini döndürür. Standart C kütüphanesinde &lt;code&gt;abs&lt;/code&gt; fonksiyonu olsa da, bu fonksiyonun
              inline derlenme garantisi yok. Ekstra fonksiyon çağrısına gerek bırakmamak için, bu makroyu tercih edeceğiz.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BN_CMP&lt;/code&gt; : İki sayıyı karşılaştır. İlk sayı ikinci sayıdan büyükse 1, küçükse -1, eşitse 0 döndürür.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bir sonraki yazıda, negatif olmayan tamsayılar üzerinde toplama ve çıkarma fonksiyonlarını tanımlayacağız.&lt;/p&gt;
&lt;h3&gt;Ek Kaynaklar&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Eli Bendersky's website
: &lt;a href="https://eli.thegreenplace.net/2010/10/21/64-bit-types-and-arithmetic-on-32-bit-cpus"&gt;64-bit types and arithmetic on 32-bit CPUs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC Documentation: &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Long-Long.html#Long-Long"&gt;Double-Word Integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GNU MP Manual: &lt;a href="https://gmplib.org/manual/Introduction-to-GMP.html#Introduction-to-GMP"&gt;Introduction to GNU MP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/128-bit_computing"&gt;128-bit computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Endianness"&gt;Endianness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wikipedia: &lt;a href="https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic"&gt;Arbitrary-precision arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/buyuk-sayi-islemleri-giris.html</guid><pubDate>Sat, 22 Feb 2020 17:35:00 GMT</pubDate></item><item><title>Programlamaya JavaScript ile Başlamak İçin 6 Neden</title><link>http://ysar.net/yazilim-dunyasi/javascript-ile-baslamak-icin-6-neden.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Hobi olarak programlama öğrenmek isteyenler veya programlamaya bir yerden başlayıp, zaman içinde
meslek haline getirmek isteyenler, zaman zaman e-posta yolu ile bana ulaşıp, hangi programlama diliyle
başlamaları gerektiği konusunda fikir almak istiyorlar. Bugüne kadar, bazen C, bazen de Python lehine
tavsiye veriyordum. Son zamanlarda, JavaScript'in başlangıç dili olmaya çok müsait olduğu konusunda
giderek kuvvetlenen bir kanaat geliştirdim. Neden böyle düşündüğümü, 6 madde halinde sizlerle paylaşmak istedim.&lt;/p&gt;
&lt;h2&gt;Şimdi Başlayabilirsiniz&lt;/h2&gt;
&lt;p&gt;Eğer bu yazıyı şahsi bilgisayarınızdaki bir web tarayıcı üzerinden okuyorsanız, JavaScript
kodlamaya hemen başlayabilirsiniz. JavaScript ile programlamaya başlamak için, diğer dillerde
olduğu gibi, geliştiricilere yönelik araç/gereçlerin kurulumuna ihtiyacınız yok. Bir metin
düzenleyici (notepad, gedit, textedit gibi) ve web tarayıcı işinizi görecektir.&lt;/p&gt;
&lt;h2&gt;Platform Özgürlüğü&lt;/h2&gt;
&lt;p&gt;JavaScript kodlarınız tarayıcıda çalışacağı için, derleyici/yorumlayıcı sürümleri,
işletim sistemi veya işlemci mimarisi
gibi platformlar arasındaki farklılıklarla dikkatinizi bölmenize gerek kalmayacak. Tarayıcılar
arasında da birtakım farklılıklar olabilse de, bunlar öğrenme aşamasında engel olacak konular değil.&lt;/p&gt;
&lt;h2&gt;Otomatik Hafıza Yönetimi&lt;/h2&gt;
&lt;p&gt;Bu özellik çoğu modern dil için de geçerli, ama, JavaScript özelinde
tekrar etmekte fayda var. Hafızada yer ayırmak, işi bittikten sonra
hafızayı iade etmek gibi işler JavaScript tarafından kontrol ediliyor.
Ayrıca, kullanacağınız değişkenlerin veri tiplerini de açıkla belirtmek zorunda değilsiniz.
Bu sayede, doğrudan
aritmetik işlemler, fonksiyonlar, döngüler, koşullu ifadeler gibi programlama
konularına geçebilir, hızlı deneme/yanılma süreci sayesinde, kendinizi geliştirebilirsiniz.&lt;/p&gt;
&lt;h2&gt;Arayüz Programlama&lt;/h2&gt;
&lt;p&gt;Python/C/Java gibi dillerle programlama öğrenmeye başlayan biri, neredeyse her zaman
konsol programları yaparak başlar. Konsol programlarının gerekliliği ve faydası
tartışmaya açık olmamakla birlikte, programlamaya yeni başlayanların, özellikle de
hobi olarak programlama öğrenmek isteyenlerin hayalinde konsol uygulamaları yapmaktan
ziyade, arayüzü olan interaktif programlar yapmak var. İnternetin programlama dili
olan JavaScript, HTML/CSS ile birlikte, arayüzü olan interaktif uygulamalar yapmaya
çok elverişli. O kadar elverişli ki, bazı masaüstü programları bile, programın içine
gömülü web tarayıcı sayesinde HTML/JavaScript ile kodlanıyor.&lt;/p&gt;
&lt;h2&gt;Güvenli Ortam&lt;/h2&gt;
&lt;p&gt;Acemi programcının, bilgisayara zarar verme endişesi taşımasına gerek yok. JavaScript
ile aşırı RAM/CPU kullanımı neticesinde tarayıcıyı veya tüm bilgisayarı kilitleme
riski olsa da, istemeden binlerce dosyayı silme, binlerce dosya oluşturma, bilgisayar
ayarlarında zararlı değişiklikler yapma gibi potansiyel riskler sıfıra yakın.&lt;/p&gt;
&lt;h2&gt;Diğer Dillerle Benzerliği&lt;/h2&gt;
&lt;p&gt;JavaScript grameri, koşullu ifadeleri, döngüleri gibi özellikleri C/C++/Java/C#
gibi dillere çok yakın. JavaScript yazarken edindiğiniz alışkanlıkları, bu dillere
geçerken yanınızda götürebilirsiniz.&lt;/p&gt;
&lt;h2&gt;İkna Oldum, Şimdi Ne Yapmalıyım?&lt;/h2&gt;
&lt;p&gt;Boş bir metin dosyası oluşturun, aşağıdaki satırları yapıştırın, ve &lt;code&gt;.html&lt;/code&gt; uzantısı ile
kaydedin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"metin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    document.getElementById("metin").innerText = "Merhaba Dünya!"
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;İlk JavaScript programınızı bir tarayıcıda test etmeye hazırsınız. Belki bugün
programlama maceranızın bir başlangıcı olur.&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/yazilim-dunyasi/javascript-ile-baslamak-icin-6-neden.html</guid><pubDate>Thu, 04 Jul 2019 20:05:00 GMT</pubDate></item><item><title>Çengel Bulmaca</title><link>http://ysar.net/diger/cengel-bulmaca-1.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Bir aralar çengel bulmacak yapmaya merak salmıştım. O zamanlardan kalan bir çalışma.&lt;/p&gt;
&lt;style id="Kitap31_17974_Styles"&gt;
&lt;!--table
    {mso-displayed-decimal-separator:"\,";
    mso-displayed-thousand-separator:"\.";}
.xl1517974
    {padding-top:1px;
    padding-right:1px;
    padding-left:1px;
    mso-ignore:padding;
    color:black;
    font-size:11.0pt;
    font-weight:400;
    font-style:normal;
    text-decoration:none;
    font-family:Calibri, sans-serif;
    mso-font-charset:162;
    mso-number-format:General;
    text-align:general;
    vertical-align:bottom;
    mso-background-source:auto;
    mso-pattern:auto;
    white-space:nowrap;}
.xl6317974
    {padding-top:1px;
    padding-right:1px;
    padding-left:1px;
    mso-ignore:padding;
    color:#827A4A;
    font-size:10.0pt;
    font-weight:700;
    font-style:normal;
    text-decoration:none;
    font-family:Arial, sans-serif;
    mso-font-charset:162;
    mso-number-format:General;
    text-align:left;
    vertical-align:top;
    border:.5pt solid windowtext;
    mso-background-source:auto;
    mso-pattern:auto;
    white-space:nowrap;}
.xl6417974
    {padding-top:1px;
    padding-right:1px;
    padding-left:1px;
    mso-ignore:padding;
    color:#EEECE1;
    font-size:6.0pt;
    font-weight:700;
    font-style:normal;
    text-decoration:none;
    font-family:Arial, sans-serif;
    mso-font-charset:162;
    mso-number-format:General;
    text-align:left;
    vertical-align:top;
    border:.5pt solid windowtext;
    background:black;
    mso-pattern:black none;
    white-space:nowrap;}
--&gt;
&lt;/style&gt;

&lt;table border="0" cellpadding="0" cellspacing="0" width="459" style="border-collapse:
 collapse;table-layout:fixed;width:342pt"&gt;
 &lt;col width="51" span="9" style="mso-width-source:userset;mso-width-alt:1820;
 width:38pt"&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" width="51" style="height:38.4pt;width:38pt"&gt;1&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;18&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;19&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;20&lt;/td&gt;
  &lt;td class="xl6417974" width="51" style="border-left:none;width:38pt"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;2&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;24&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;25&lt;/td&gt;
  &lt;td class="xl6317974" width="51" style="border-left:none;width:38pt"&gt;27&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;3&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;4&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;5&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;6&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6417974" style="height:38.4pt;border-top:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;7&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;22&lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;8&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6417974" style="height:38.4pt;border-top:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;9&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;23&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;10&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;11&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;12&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;21&lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;13&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;26&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;28&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;14&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;15&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr height="51" style="mso-height-source:userset;height:38.4pt"&gt;
  &lt;td height="51" class="xl6317974" style="height:38.4pt;border-top:none"&gt;16&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6417974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt;17&lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
  &lt;td class="xl6317974" style="border-top:none;border-left:none"&gt; &lt;/td&gt;
 &lt;/tr&gt;
 
 &lt;tr height="0" style="display:none"&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
  &lt;td width="51" style="width:38pt"&gt;&lt;/td&gt;
 &lt;/tr&gt;
 
&lt;/table&gt;

&lt;div style="position: relative; width: 100%; margin-top:1em"&gt;
    &lt;div style="float: left; width: 45%; padding: 1em"&gt;
            &lt;h6 style="font-size:1.4em;border-bottom: 1px solid black"&gt;Soldan Sağa&lt;/h6&gt;
    &lt;/div&gt;
    &lt;div style="float: left; width: 45%; padding: 1em"&gt;
        &lt;h6 style="font-size:1.4em;border-bottom: 1px solid black"&gt;Yukarıdan Aşağıya&lt;/h6&gt;
    &lt;/div&gt;

    &lt;div style="float: left; width: 45%; padding: 1em"&gt;

        &lt;div&gt;1) Aynı zamanda bir fiil çekimi olan rakam&lt;/div&gt;
        &lt;div&gt;2) Kendi kendine verilen söz, ahit&lt;/div&gt;
        &lt;div&gt;3) Bozkır&lt;/div&gt;
        &lt;div&gt;4) Mevsimi dışında bitki yetiştirmek için hazırlanan kapalı alan&lt;/div&gt;
        &lt;div&gt;5) Genellikle iltihaba bağlı olarak vücutta gelişen şişlik veya yumru&lt;/div&gt;
        &lt;div&gt;6) Elektrik yüklü atom&lt;/div&gt;
        &lt;div&gt;7) İçine su koyulan metal kap&lt;/div&gt;
        &lt;div&gt;8) (Kısa) Vücutta kas ve sinir hastalıkları teşhisinde kullanılan bir yöntem&lt;/div&gt;
        &lt;div&gt;9) Şu an çözdüğünüz&lt;/div&gt;
        &lt;div&gt;10) Küp şeklinde rasgele sayı üretici&lt;/div&gt;
        &lt;div&gt;11) Jamaika kökenli bir müzik türü&lt;/div&gt;
        &lt;div&gt;12) ______-Gaz, metalcilikte kullanılan bir kaynak yöntemi&lt;/div&gt;
        &lt;div&gt;13) Ölmüş birini hatırlamak için yapılan tören&lt;/div&gt;
        &lt;div&gt;14) Üstü açık boru&lt;/div&gt;
        &lt;div&gt;15) Erkek incir&lt;/div&gt;
        &lt;div&gt;16) Gözümde canlanır koskoca ______?&lt;/div&gt;
        &lt;div&gt;17) Sesin ayırt edici özelliği&lt;/div&gt;
    &lt;/div&gt;
    &lt;div style="float:left; width: 45%;clear: right; border-left: 2px dotted black; padding: 1em"&gt;

        &lt;div&gt;1) (Kısa) Yüksek Seçim Kurulu&lt;/div&gt;
        &lt;div&gt;10) Odak uzaklığı sabit olmayan lens türü&lt;/div&gt;
        &lt;div&gt;18) Hitit&lt;/div&gt;
        &lt;div&gt;9) _____giller, yeşil kabuklu ve taneli bir bitki familyası&lt;/div&gt;

        &lt;div&gt;19) İzinsiz&lt;/div&gt;
        &lt;div&gt;20) _____ etmek, bozmak, geri çekmek, geçersiz kılmak&lt;/div&gt;
        &lt;div&gt;21) Simetrik rakam&lt;/div&gt;
        &lt;div&gt;22) Cep telefonunda kısa mesaj&lt;/div&gt;
        &lt;div&gt;2) İsyan eden&lt;/div&gt;
        &lt;div&gt;23) Bir dinde öğrenilmesi gerekli görülen bilgilerin tümü&lt;/div&gt;
        &lt;div&gt;24) Öfkeli, telaşlı veya coşkulu&lt;/div&gt;
        &lt;div&gt;25) Güzel koku&lt;/div&gt;
        &lt;div&gt;26) _____ etmek, engel olmak, yasaklamak&lt;/div&gt;
        &lt;div&gt;27) Meyve aromalı bir toz içeçek&lt;/div&gt;
        &lt;div&gt;28) Yumurtanın beyazı&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>http://ysar.net/diger/cengel-bulmaca-1.html</guid><pubDate>Tue, 02 Jul 2019 20:12:00 GMT</pubDate></item><item><title>Düzenli İfade (RegExp) Motorları ve Otomatlar</title><link>http://ysar.net/algoritma/dfa.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Geçtiğimiz günlerde, Flex ve Bison ile JSON işlemeye yönelik tutorial yazdım.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ysar.net/yazilim-dunyasi/flex-bison.html"&gt;Flex ve Bison kullanarak JSON İşleme (1. Kısım)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ysar.net/yazilim-dunyasi/json-kutuphanesi.html"&gt;Flex ve Bison kullanarak JSON İşleme (2. Kısım)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O iki yazı üzerinde çalışırken, dikkatim düzenli ifade (RegExp) motorları üzerine kaydı.
Bu yazıda, &lt;code&gt;[-]?(0|[1-9][0-9]*)([.][0-9]+)?([eE][-+]?[0-9]+)?&lt;/code&gt; düzenli ifadesi ile
eşleşecek bir "Deterministic Finite Automata" (ks. DFA, tr; Belirli Sonlu Otomat)
kodlayacağız. &lt;/p&gt;
&lt;h2&gt;Düzenli İfadeler ve DFA&lt;/h2&gt;
&lt;p&gt;Düzenli ifadeler, metin işleyen programlar için, çok faydalı araçlardır. Örneğin, internet
formlarında, girilen metnin format kurallarına uyup uymadığını test edebilir, metin
belgelerinin içinde e-posta, telefon numarası arayabilir, ya da bir önceki yazıda olduğu
gibi, lexical analiz aracı olarak kullanabilirsiniz.&lt;/p&gt;
&lt;p&gt;Düzenli ifadeler, mini bir programlama dili gibidir. &lt;code&gt;(a|b)+&lt;/code&gt; gibi bir ifade, düzenli
ifade motoru tarafından derlenir, derlenen düzenli ifade, istediğimiz metin üzerinde
arama veya eşleme yapmak için kullanılır.&lt;/p&gt;
&lt;p&gt;Düzenli ifade motoru yazmak için, tek bir yol yok. Bu yazıda, metinle eşleme yapmak
için, düzenli ifadeyi bir DFA'ya çevireceğiz. Her ne kadar düzenli ifade motorları
&lt;code&gt;(a|b)+&lt;/code&gt; gibi bir düzenli ifadeyi otomatik olarak DFA'ya çevirebilse de, bu yazıda
çevirme işlemini manuel olarak yapacağız.&lt;/p&gt;
&lt;p&gt;Önce DFA'yı tarif ederek başlayalım. DFA'yı bir makine (automata) gibi düşünebilirsiniz.
Bu makinenin üstünde bazı tuşlar hayal edin. Bu tuşların birine basıldığında, makine bir
durumdan, başka bir duruma geçiyor. Makinenin üzerinde, o an hangi durumda olduğu gösteren
led ışıklar da var. Bu makineyi öyle bir şekilde tasarlayacağız ki, düzenli ifadeyle
eşleşen bir metin tuşladığımızda başarılı ledi yanacak, aksi halde başarısız ledi yanacak.&lt;/p&gt;
&lt;p&gt;Bu makineyi oluşturmak için, 5 şeyi bilmemiz gerek.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Led Sayısı        (Makine kaç farklı durumda olabilir)&lt;/li&gt;
&lt;li&gt;Başlangıç Ledi    (Makineyi sıfırladığımızda, hangi led yanacak)&lt;/li&gt;
&lt;li&gt;Başarılı Ledler   (Ledlerin hangileri başarılı eşleşmeyi gösterecek)&lt;/li&gt;
&lt;li&gt;Tuşlar            (Makinenin üstünde kaç farklı tuş olacak)&lt;/li&gt;
&lt;li&gt;Geçiş Tablosu     (Hangi durumda, hangi tuşa basılınca, hangi duruma geçilecek)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bu tarz makineye, Deterministic Finite Automata (DFA) deniyor çünkü;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Deterministic&lt;/em&gt;: Hangi girdiye, hangi sonucu vereceği kesin olarak bellidir.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Finite&lt;/em&gt;       : Makinanın içinde bulunabileceği sınırlı sayıda durum vardır.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Automata&lt;/em&gt;     : Bu bir makina&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Daha net anlaşılması için, basit düzenli ifadeleri, DFA'ya çevirelim.
Örnekler fazla karmaşık olmaması için 3 tuşlu bir makineyle başlayalım.
Bunlar küçük harflerle 'a','b' ve 'c' tuşları olsun. Makinemizde, 3
adet de durum ledi olacak, bunlar da büyük harflerle 'A','B' ve 'C' olsun.
Bu şartlarda, &lt;code&gt;a&lt;/code&gt; düzenli ifadesi ile eşleşecek bir DFA, aşağıdaki şemaya göre çalışabilir.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://ysar.net/../example1.svg"&gt;&lt;/p&gt;
&lt;p&gt;Yukarıdaki şemada, 'A' ledi başlangıç durumunu, 'B' ledi başarılı eşleşmeyi,
'C' ledi de başarısız eşlemeyi ifade etsin. Başlangıç durumunda iken, 'a' tuşuna
bastığımızda, 'B' ledini yakacağız. Diğer tüm durumlarda, 'C' ledini yakacağız.
Böylece, tek bir 'a' karakteri kabul eden bir DFA tasarlamış olduk.&lt;/p&gt;
&lt;p&gt;Aynı DFA'yı, aşağıdaki tablo ile de gösterebiliriz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;+-------+---+---+---+
| Durum | a | b | c |
+-------+------------
|  A    | B | C | C |
+-------+---+---+---+
|  B    | C | C | C |
+-------+---+---+---+
|  C    | C | C | C |
+-------+---+---+---+
&lt;/pre&gt;


&lt;p&gt;Soldaki sütun, o anki durumu, üst satır, işleyeceğimiz bir sonraki karakteri, hücre
içindeki değerler de, o durumda o karakter işlendiğinde hangi duruma geçileceğini
ifade ediyor.&lt;/p&gt;
&lt;p&gt;Bir de, &lt;code&gt;a*&lt;/code&gt; düzenli ifadesini deneyelim. Burada, sıfır, bir veya daha fazla 'a'
karakteri ile eşleme yapmak istiyoruz. Bunun için de, aşağıdaki şekilde bir DFA
yapabiliriz. Burada, başlangıç ve başarılı ledi 'A' ledi, başarısız ledi 'B' ledi
olsun. 'C' ye ihtiyacımız yok.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://ysar.net/../example2.svg"&gt;&lt;/p&gt;
&lt;p&gt;Şimdi de, &lt;code&gt;a+&lt;/code&gt; ifadesine bakalım. Bir öncekinden farkı, en az bir tane
'a' karakterine ihtiyaç duyulması. Aşağıdaki DFA'da, başlangıç 'C',
başarılı 'A' ve başarısız 'B' durumu olsun.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://ysar.net/../example3.svg"&gt;&lt;/p&gt;
&lt;p&gt;Şimdiye kadar yaptığımız örneklerde, tüm durumlar ya başlangıç, ya başarılı
eşleşme ya da hata belirtiyordu. Bunların haricinde, belirsizlik ifade
eden durumlarımız da olabilir. Bu durumlar, eşlemenin sağlanıp sağlanmadığını
tespit edebilmek için, daha fazla karakter okumak gerekir anlamına gelir. Şimdiye
kadar yaptığımız örnekler çok basit olduğu için, böyle bir durumla karşılaşmadık.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(a|b)a&lt;/code&gt; düzenli ifadesini DFA'ya çevirebilmek için, belirsiz duruma da ihtiyacımız
olacak. Önce 'a' veya 'b' karakteri istiyoruz. Daha sonra 1 tane
daha 'a' karakterine ihtiyacımız var. İlk okuduğumuz karakter 'a' veya 'b' ise,
daha fazla karakter okumadan başarılı veya başarısız bir sonuç bildiremeyiz. Bu düzenli
ifadeyi DFA'ya çevirmek için, dördüncü bir duruma ihtiyacımız olacak. Bu duruma da 'D'
durumu diyelim.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://ysar.net/../example4.svg"&gt;&lt;/p&gt;
&lt;p&gt;DFA'larımız büyüdükçe, başarısız her girdiyi bir noktaya toplamak şemalarımızın
okunmasını zorlaştıracağı için, şemada belirtilmeyen her yolun başarısız durumuna
gittiğini varsayabiliriz. Bu varsayıma dayanarak, yukarıdaki şema ile, aşağıdaki
şema birbirine denk olarak değerlendirilmelidir.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://ysar.net/../example5.svg"&gt;&lt;/p&gt;
&lt;h2&gt;DFA'yı Nasıl Kodlayacağız&lt;/h2&gt;
&lt;p&gt;Uygulamada,  "State Machine" (durum makinesi?) kodlamak için
kullanılan en az iki farklı yöntem var. Bunlardan biri, durumlar arasındaki geçişi
bir tabloda göstermek. Bir önceki başlık altında yaptığımız son örneği, bir
tablo ile kodlamak istersek, aşağıdaki gibi kodlayabiliriz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;ornek_5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;tablo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;//  a | b | c&lt;/span&gt;
        &lt;span class="cm"&gt;/* A */&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="cm"&gt;/* B */&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="cm"&gt;/* C */&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="cm"&gt;/* D */&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Başlangıç&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;match_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// kaç karakter eşledik&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="c1"&gt;// kaçıncı karakteri işliyoruz.&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// D başarısız durum&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// C başarılı durum&lt;/span&gt;
            &lt;span class="n"&gt;match_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tablo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// kaç karakter eşleyebildiğimizi döndür&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;DFA'yı kodlamak için kullanılabilecek bir diğer yöntem de, durum geçişlerini
&lt;code&gt;switch&lt;/code&gt; ifadesiyle göstermek. Bunun C kodunda karşılığı da aşağıdaki şekilde
olabilir.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;ornek_5_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Başlangıç&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;match_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// kaç karakter eşledik&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="c1"&gt;// kaçıncı karakteri işliyoruz.&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// D başarısız durum&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// kaç karakter eşleyebildiğimizi döndür&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Makrolarla biraz daha okunaklı olarak kodlayabiliriz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define SETSTATE(x) {state = (x); goto set_state_end; }&lt;/span&gt;
&lt;span class="cp"&gt;#define END_OF_CASE SETSTATE(0)&lt;/span&gt;
&lt;span class="cp"&gt;#define MATCH_FOUND (match_size = i);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;ornek_5_3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Başlangıç&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;match_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// kaç karakter eşledik&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="c1"&gt;// kaçıncı karakteri işliyoruz.&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;MATCH_FOUND&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;set_state_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// kaç karakter eşleyebildiğimizi döndür&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#undef SETSTATE&lt;/span&gt;
&lt;span class="cp"&gt;#undef END_OF_CASE&lt;/span&gt;
&lt;span class="cp"&gt;#undef MATCH_FOUND&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Sayı Eşleyen DFA&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;[-]?(0|[1-9][0-9]*)([.][0-9]+)?([eE][-+]?[0-9]+)?&lt;/code&gt; düzenli ifadesine karşılık gelen DFA'yı
aşağıdaki şekilde oluşturdum.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://ysar.net/../dfa_graph.svg"&gt;&lt;/p&gt;
&lt;p&gt;İlk yaptığımız örneklere nazaran, biraz daha uzun bir DFA, ancak, temel prensipleri
doğru kavradıysanız, şema ile düzenli ifadeyi karşılaştırarak, nasıl çalıştığını
rahatlıkla anlayabilirsiniz diye düşünüyorum. Bu DFA'nın C kodu olarak karşılığı
da, son yaptığım örneğin, biraz daha uzunu olacak.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;match_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#define SETSTATE(x) {state = (x); goto set_state_end; }&lt;/span&gt;
&lt;span class="cp"&gt;#define END_OF_CASE SETSTATE(0)&lt;/span&gt;
&lt;span class="cp"&gt;#define MATCH_FOUND (match_size = i);&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;match_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'A'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;'1'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;MATCH_FOUND&lt;/span&gt; &lt;span class="c1"&gt;// 0 veya -0 esledik&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'C'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;'1'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;MATCH_FOUND&lt;/span&gt; &lt;span class="c1"&gt;// pozitif tamsayı esledik&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'E'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'F'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;MATCH_FOUND&lt;/span&gt; &lt;span class="c1"&gt;// ondalikli sayi esledik&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'e'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'G'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'-'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;'+'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'H'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'J'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'H'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'J'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;'J'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;MATCH_FOUND&lt;/span&gt; &lt;span class="c1"&gt;// bilimsel gosterimli sayi esledik&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="sc"&gt;'9'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;SETSTATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'J'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;END_OF_CASE&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nl"&gt;set_state_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;match_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;#undef MATCH_FOUND&lt;/span&gt;
&lt;span class="cp"&gt;#undef END_OF_CASE&lt;/span&gt;
&lt;span class="cp"&gt;#undef SETSTATE&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Match &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;match_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Fonksiyonu komut satırından test edebilmek için, &lt;code&gt;main&lt;/code&gt; fonksiyonu da yazdım. Komut satırından
vereceğiniz 1. argüman üzerinde eşleme işlemini yapıyor. Aşağıdaki gibi farklı sayı çeşitleriyle
test edebilirsiniz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;0
-0
1
12
12.4
-12.4
12.4E-02
-12.42e+12
&lt;/pre&gt;


&lt;p&gt;Artık düzenli ifadelerin nasıl çalıştığı konusunda biraz bilgi sahibi oldunuz. Hayatınıza
daha bilgili olarak devam edebilirsiniz.&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/algoritma/dfa.html</guid><pubDate>Mon, 01 Jul 2019 18:44:00 GMT</pubDate></item><item><title>Flex ve Bison kullanarak JSON İşleme (2. Kısım)</title><link>http://ysar.net/yazilim-dunyasi/json-kutuphanesi.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Bu yazının &lt;a href="http://ysar.net/yazilim-dunyasi/flex-bison.html"&gt;birinci bölümünde&lt;/a&gt; Flex/Bison kullanarak
JSON tarayan bir parser yapmıştık. Ancak, bu parser karşılaştığı
JSON türlerinin ismini konsola yazmak dışında faydalı bir iş yapmıyordu.
Bu yazıda, sıfırdan bir JSON kütüphanesi tasarlayarak, parser ile
entegre edeceğiz. Bu yazı için gerekli proje iskeletine
&lt;a href="http://ysar.net/jsonparser-skeleton.2.tar.gz"&gt;bu linkten&lt;/a&gt;
ulaşabilirsiniz. Projeyi derlemeye hazırlamak için &lt;code&gt;./configure&lt;/code&gt;
komutunu vermeyi unutmayın.&lt;/p&gt;
&lt;h2&gt;Kütüphane Arayüzü&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;json.h&lt;/code&gt; header dosyası içine aşağıdaki satırları ekleyin. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;JTYPE_NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;JTYPE_BOOL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;JTYPE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;JTYPE_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;JTYPE_ARRAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;JTYPE_OBJECT&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;JType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_json&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// deger olusturmak icin &lt;/span&gt;
&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_null&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// json tipini almak icin&lt;/span&gt;
&lt;span class="n"&gt;JType&lt;/span&gt; &lt;span class="nf"&gt;json_get_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// array ve object icine elemen eklemek icin gerekli fonksiyonlar&lt;/span&gt;
&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_object_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// konsola yazdirmak icin&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;json_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;indentation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;JSON kütüphanemizin oldukça basit bir arayüzü var. 6 farklı türde JSON oluşturmak
için, 6 farklı &lt;code&gt;json_make_*&lt;/code&gt; fonksiyonumuz var. &lt;code&gt;json_get_type&lt;/code&gt; adından anlaşılacağı
gibi, JSON değerinin türünü (string, null vs.) tespit etmeye yarıyor. &lt;code&gt;json_array_push&lt;/code&gt;
ve &lt;code&gt;json_object_add&lt;/code&gt; sırasıyla Array ve Object türlerine eleman eklemeye yarıyor.
&lt;code&gt;json_print&lt;/code&gt; fonksiyonunu da okuduğumuz JSON verisini güzel bir formatta çıktı vermek
için kullanacağız.  &lt;/p&gt;
&lt;h2&gt;Kütüphane Kodları&lt;/h2&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Bu başlık altında yazacağımız kodları, `json.c` dosyasına ekleyin.
&lt;/pre&gt;


&lt;p&gt;Kütüphanenin tek bir &lt;code&gt;_struct json&lt;/code&gt; veri yapısı ile çalışabilmesi için,
bu veri yapısının 6 farklı türde JSON verisini bünyesinde barındıracak
şekilde tasarlarlanması gerekiyor. Benim kullanacağım veri yapısı aşağıdaki
gibi;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_json&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;JType&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_json&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_json&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;   &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_json&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;elems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;   &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s_val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d_val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;struct _json&lt;/code&gt; yazacağımız kütüphanenin merkezinde olacağı için, detaylı bir açıklamayı
hak ediyor.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: JSON objesinin 6 farklı JSON türünden hangisine ait olduğunu tutacağımız değişken.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prev&lt;/code&gt; ve &lt;code&gt;next&lt;/code&gt;: Array veya Object içindeki elemanlarda, bir önceki ve bir sonraki objeye referans olarak kullanılacak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; : Object içinde bulunan değelerin adını tutmak için kullanılacak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elems&lt;/code&gt; : Object ve Array türlerinde, içerdiği eleman listesinin ilk elemanına referans olarak kullanılacak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s_val&lt;/code&gt; : String türünde, string'in değerini tutmak için kullanılacak&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d_val&lt;/code&gt; : Number ve Boolean türlerinde, değeri tutmak için kullanılacak.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Farklı JSON türlerinde değer oluşturacak fonksiyonlarla devam edelim.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JType&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_null&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_make_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JTYPE_NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JTYPE_BOOL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JTYPE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JTYPE_STRING&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;s_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_array&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_make_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JTYPE_ARRAY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_make_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;json_make_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JTYPE_OBJECT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bu fonksiyonlar yeterince sade olduğu için, ekstra bir açıklamaya gerek duymuyorum. &lt;code&gt;json_get_type&lt;/code&gt;
fonksiyonu da, gayet basit:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;JType json_get_type(JSON *j)
{
    return j-&amp;gt;type;
}
&lt;/pre&gt;


&lt;p&gt;Object ve Array türlerine eleman eklemek için, aşağıdaki fonksiyonları kullanacağız.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;_array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* skip */&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;elems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;elems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;json_object_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;elems&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;elems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;Parser, Lexer ve Kütüphane'yi Tanıştırmak&lt;/h2&gt;
&lt;p&gt;Lexer ve Parser'ın kütüphanemizle uyumlu çalışabilmesi için, öncelikle, aşağıdaki kod bloğunu &lt;code&gt;parser.y&lt;/code&gt;'nin
ilk satırına eklememiz gerekiyor.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%code&lt;/span&gt; &lt;span class="n"&gt;requires&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"json.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Yazının devamında, parser'ın tanıdığı sembolleri, &lt;code&gt;JSON&lt;/code&gt; veri tipine dönüştüreceğiz.
Bunun için, &lt;code&gt;#include "json.h"&lt;/code&gt; direktifi ile,  parser'ımıza kütüphanemizi
tanıtmamız gerekiyor. Bu içe aktarma işlemini &lt;code&gt;%code requires&lt;/code&gt; ile yapmak,
&lt;code&gt;#include&lt;/code&gt; satırının &lt;code&gt;parser.h&lt;/code&gt; içinde, &lt;code&gt;%union&lt;/code&gt; tanımından önce gelmesini
temin etmek. Sırada zaten &lt;code&gt;%union&lt;/code&gt; direktifi var.&lt;/p&gt;
&lt;p&gt;Bir önceki yazıda, ne &lt;code&gt;T_NUMBER&lt;/code&gt; gibi tokenler, ne de &lt;code&gt;JVvalue&lt;/code&gt; gibi semboller
bir değer taşıyordu. Artık parser'ımızın bir değer üretmesini sağlayacağız. Bunun
için, token ve sembollerin veri tiplerini tanıtmamız gerekiyor. Bunun ilk
adımı da, kullanacağımız veri tipi çeşitlerini, &lt;code&gt;%union&lt;/code&gt; direktifi ile
göstermek. Aşağıdaki bloğu, &lt;code&gt;%code requires&lt;/code&gt; bloğunun
hemen altına ekleyin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%union&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s_val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d_val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;JSON&lt;/span&gt;   &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;j_val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Sembol ve tokenlerin veri tiplerini de, aşağıdaki şekilde göstereceğiz. &lt;code&gt;parser.y&lt;/code&gt;
içindeki sembol ve token tanımlarını aşağıdaki şekilde değiştirin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%start&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;
&lt;span class="nf"&gt;%type&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;j_val&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt; &lt;span class="n"&gt;JArray&lt;/span&gt; &lt;span class="n"&gt;JObject&lt;/span&gt; &lt;span class="n"&gt;Liste&lt;/span&gt; &lt;span class="n"&gt;KVListe&lt;/span&gt;
&lt;span class="nf"&gt;%token&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;s_val&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T_STRING&lt;/span&gt;
&lt;span class="nf"&gt;%token&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;d_val&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T_NUMBER&lt;/span&gt;
&lt;span class="nf"&gt;%token&lt;/span&gt; &lt;span class="n"&gt;T_TRUE&lt;/span&gt; &lt;span class="n"&gt;T_FALSE&lt;/span&gt; &lt;span class="n"&gt;T_NULL&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;T_TRUE, T_FALSE ve T_NULL tokenlerinin bir değer taşımasına gerek yok. Zaten tokenin
kendisi ihtiyacımız olan tüm bilgiyi bize sağlıyor. &lt;code&gt;T_STRING&lt;/code&gt; için &lt;code&gt;char *&lt;/code&gt; türünde,
&lt;code&gt;T_NUMBER&lt;/code&gt; için de &lt;code&gt;double&lt;/code&gt; türünde veri tutacağız. Bunları bize metinden okuduğu değere
göre, lexer sağlayacak. &lt;code&gt;lexer.l&lt;/code&gt; içindeki T_NUMBER ve T_STRING döndüren kuralları, aşağıdaki
şekilde değiştirin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;{TIRNAK}{TIRNAK}|{TIRNAK}{KARAKTERLER}{TIRNAK} { yylval.s_val = strdup(yytext); return T_STRING; }
[-]?{INT}{FRAC}?{EXP}?                         { yylval.d_val = atof(yytext); return T_NUMBER; }
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;yylval&lt;/code&gt;, lexer ve parser arasında veri transferi yapmaya yarayan global bir değişken. Eğer &lt;code&gt;%union&lt;/code&gt;
direktifi ile ayarlama yapmamış olsaydık, &lt;code&gt;yylval&lt;/code&gt; global değişkeni &lt;code&gt;char *yylval&lt;/code&gt; olarak tanımlanacaktı.
Bu durumda, lexer'dan parser'a &lt;code&gt;double&lt;/code&gt; türünde veri geçiremeyecektik. Doğru müdahaleyi yaptığımız için,
&lt;code&gt;yylval&lt;/code&gt;, içinde &lt;code&gt;s_val&lt;/code&gt;, &lt;code&gt;d_val&lt;/code&gt; ve &lt;code&gt;j_val&lt;/code&gt; üyelerini barındıran bir veri tipi haline geldi. &lt;code&gt;%token &amp;lt;s_val&amp;gt; T_STRING&lt;/code&gt;
tanımı sayesinde de, &lt;code&gt;T_STRING&lt;/code&gt; tokeni ile, &lt;code&gt;s_val&lt;/code&gt; değerini birbiriyle ilişkilendirmiş olduk. Aynı
durum &lt;code&gt;T_NUMBER&lt;/code&gt; için de geçerli.&lt;/p&gt;
&lt;p&gt;Tokenlerimize değer tanımladık, sıra diğer sembollerin değerlerini oluşturmaya geldi. &lt;code&gt;parser.y&lt;/code&gt;
içindeki kuralları aşağıdaki gibi değiştireceğiz;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T_STRING&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_string&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NUMBER&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_number&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_TRUE&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_bool&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_FALSE&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_bool&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;    &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NULL&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_null&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;     &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;JArray&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;                   &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;JObject&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;                   &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JArray&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;                         &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_array&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="n"&gt;Liste&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;                   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;$2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;Liste&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;                           &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_array&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_array_push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Liste&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;                 &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_array_push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JObject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'{'&lt;/span&gt; &lt;span class="s1"&gt;'}'&lt;/span&gt;                         &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_object&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'{'&lt;/span&gt; &lt;span class="n"&gt;KVListe&lt;/span&gt; &lt;span class="s1"&gt;'}'&lt;/span&gt;                 &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;$2&lt;/span&gt;                &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;KVListe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T_STRING&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;             &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_make_object&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_object_add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;KVListe&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="n"&gt;T_STRING&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;$$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json_object_add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;$5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Sanırım konunun en can alıcı yerine geldik. Öncelikle, &lt;code&gt;parse_result&lt;/code&gt; değişkeniyle başlayalım.
Bu değişkeni, &lt;code&gt;parser.y&lt;/code&gt;'nin birinci kısmında, &lt;code&gt;%{&lt;/code&gt; ve &lt;code&gt;%}&lt;/code&gt; arasındaki bloğun içinde, &lt;code&gt;JSON *parse_result&lt;/code&gt;
olarak tanımladım. Bu sayede, parse işlemi sonuçlandığında, bu global değişken sayesinde, sonuca
erişebileceğim.&lt;/p&gt;
&lt;p&gt;Burada ilk kez, &lt;code&gt;$$&lt;/code&gt; ve &lt;code&gt;$1&lt;/code&gt; gibi değişkenler kullandık. &lt;code&gt;$$&lt;/code&gt; değişkeni, yeni oluşacak
sembole değer atamak için, &lt;code&gt;$1&lt;/code&gt;,&lt;code&gt;$2&lt;/code&gt;,&lt;code&gt;$3&lt;/code&gt; gibi değişkenler de, gramer tanımındaki
1., 2., 3. vb. sembollerin değerlerine erişmek için kullanılıyor. Yukarıda yapılan
tanımları, aşağıdaki gibi hayal edebilirsiniz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;T_STRING&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JValue&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;parse_result&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_make_string(yylval.s_val)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;T_NUMBER&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JValue&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;parse_result&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_make_number(yylval.d_val)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;T_TRUE&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JValue&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;parse_result&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_make_bool(1)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;T_FALSE&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JValue&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;parse_result&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_make_bool(0)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;T_NULL&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JValue&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;parse_result&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_make_null()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;JArray&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JValue&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;parse_result&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;JArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;JObject&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JValue&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;parse_result&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;JArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;JArray&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;                         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JArray&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_make_array()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;' Liste '&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;                   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JArray&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;Liste&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;Liste&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;JValue&lt;/span&gt;                           &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JSON&lt;/span&gt; &lt;span class="err"&gt;*arr&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_make_array()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;Liste&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_array_push(arr,&lt;/span&gt; &lt;span class="err"&gt;JValue)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;Liste&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="nt"&gt;JValue&lt;/span&gt;                 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;Liste&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_array_push(Liste,&lt;/span&gt; &lt;span class="err"&gt;JValue)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;JObject&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'{'&lt;/span&gt; &lt;span class="s1"&gt;'}'&lt;/span&gt;                         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JObject&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_make_object()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'{'&lt;/span&gt; &lt;span class="nt"&gt;KVListe&lt;/span&gt; &lt;span class="s1"&gt;'}'&lt;/span&gt;                 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;JObject&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;KVListe&lt;/span&gt;                &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;KVListe&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;T_STRING&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="nt"&gt;JValue&lt;/span&gt;             &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;JSON&lt;/span&gt; &lt;span class="err"&gt;*obj&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_make_object()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;KVListe&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_object_add(obj,&lt;/span&gt; &lt;span class="err"&gt;yylval.s_val,&lt;/span&gt; &lt;span class="err"&gt;JValue)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;KVListe&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="nt"&gt;T_STRING&lt;/span&gt; &lt;span class="s1"&gt;':'&lt;/span&gt; &lt;span class="nt"&gt;JValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;KVListe&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;json_object_add(KVListe,&lt;/span&gt; &lt;span class="err"&gt;yylval.s_val,&lt;/span&gt; &lt;span class="err"&gt;JValue)&lt;/span&gt; &lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Kodların normal haliyle, bu hayali kodlar karşılaştırıldığında, &lt;code&gt;$&lt;/code&gt; değişkenlerinin işlevi yeterince kendini
belli etti diye düşünüyorum.&lt;/p&gt;
&lt;p&gt;Böylece, metin belgesinden JSON formatında bir veriyi tarayıp, C veri yapılarına aktarmış olduk. Okuduğumuz veriyi,
C ile istediğimiz şekilde değerlendirebiliriz. Benim aklıma ilk gelen şey, JSON formatlama oldu.&lt;/p&gt;
&lt;h2&gt;Formatlanmış JSON Çıktısı&lt;/h2&gt;
&lt;p&gt;Konuyu fazla dağıtmamak adına, JSON formatlama ile ilgili kodlara burada değinmeyeceğim. İsteyenler,
&lt;a href="http://ysar.net/../jsonparser-skeleton.2.tar.gz"&gt;projenin tamamlanmış hali'ni&lt;/a&gt; indirerek, bu kodları
inceleyebilir. Projeyi indirip, bir yere açtıktan sonra, &lt;code&gt;./configure&lt;/code&gt; ve &lt;code&gt;make&lt;/code&gt; komutları
ile, projeyi derleyebilirsiniz. Klasörün içinde, projeyi test etmeniz için, &lt;code&gt;example1.json&lt;/code&gt;,
&lt;code&gt;example2.json&lt;/code&gt; ve &lt;code&gt;example3.json&lt;/code&gt; adında 3 adet dosya var. &lt;code&gt;./jsonparser &amp;lt; example1.json &amp;gt; example1-pretty.json&lt;/code&gt;
benzeri komutlarla, programı test edebilirsiniz. Formatlanmış çıktıyı oluşturan kodlar, &lt;code&gt;json.c&lt;/code&gt; içinde bulunabilir.&lt;/p&gt;
&lt;h2&gt;Uyarılar&lt;/h2&gt;
&lt;p&gt;Bu tutorial'ın öncelikli hedefi Flex/Bison ile lexer/parser yapmak olduğu için, önemli olabilecek
bazı noktaları göz ardı ettim. Eğer burada okuduğunuz kodları gerçek bir işte kullanmaya kalkışacaksanız,
aşağıdaki noktalara dikkat etmeniz gerekiyor.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lexer'ın tanıdığı string ile JSON standardındaki string arasında bazı farklılıklar var. Örneğin, json stringi
   içinde \x kaçma karakterinden sonra, 4 haneli bir sayı gelmeli. Bizim lexer'ımız buna dikkat etmiyor.&lt;/li&gt;
&lt;li&gt;Sayı türünde çıktı alırken, her zaman noktadan sonra 6 hane bulunuyor. Sayı çıktılarının düzeltilmesi gerek.&lt;/li&gt;
&lt;li&gt;Birçok yerde &lt;code&gt;calloc&lt;/code&gt; çağrısı var ama hiç &lt;code&gt;free&lt;/code&gt; çağrısı yok. Eğer uzun süre çalışacak bir program yazacaksanız,
   tuttuğunuz hafızayı işiniz bitince salmanız gerek.&lt;/li&gt;
&lt;li&gt;Hata kontrolü neredeyse yok. Özellikle &lt;code&gt;json_array_push&lt;/code&gt; ve &lt;code&gt;json_object_add&lt;/code&gt; fonksiyonlarında, verilen
   argümanın tipi gerçekten array/object mi kontrol edilebilir.&lt;/li&gt;
&lt;li&gt;Multithread bir programda denemeyin bile, malumunuz herşey global değişkenlerde. Flex/Bison ile
   reentrant parser da yapılabiliyor, ancak, ben hiç denemedim. İsterseniz, &lt;a href="https://www.gnu.org/software/bison/manual/html_node/Pure-Decl.html"&gt;belgeleri okuyabilirsiniz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Son Sözler&lt;/h2&gt;
&lt;p&gt;Siz ne düşünüyorsunuz bilmiyorum ama, ben parser konusunu çok heyecan verici buluyorum. Bu iki yazıda öğrendiklerinizin
üzerine biraz daha araştırma yaparak, CSV, HTML, XML, HTTP protokolü, ini dosyaları gibi çok çeşitli metin belgeleri
üzerinde çalışabileceğiniz gibi, bir programlama dili derleyicisi veya yorumlayıcısı da yapabilirsiniz. Haydi gidin, birşeyler kodlayın.&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/yazilim-dunyasi/json-kutuphanesi.html</guid><pubDate>Thu, 27 Jun 2019 21:17:00 GMT</pubDate></item><item><title>Flex ve Bison kullanarak JSON İşleme (1. Kısım)</title><link>http://ysar.net/yazilim-dunyasi/flex-bison.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;İki kısımdan oluşmasını planladığım bu yazı dizisinde, Flex ve Bison
kullanarak, JSON işleyen Lexer ve Parser tasarlayacağız. Bu kısımda,
Flex/Bison konusuna sıfırdan başlayacağım için, önceden bu programları
tanıyor olmanıza gerek yok. &lt;/p&gt;
&lt;h2&gt;İhtiyaç Listesi&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Derleme ortamı olarak Linux/Unix veya Cygwin üzerinde &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;cc&lt;/code&gt; vb. geliştirici programları&lt;/li&gt;
&lt;li&gt;flex (ya da lex) ve bison (ya da yacc)&lt;/li&gt;
&lt;li&gt;Başlangıç seviyesinde C Programlama Bilgisi&lt;/li&gt;
&lt;li&gt;Orta Seviye Düzenli İfadeler (Regular Expressions, RegExp) Bilgisi&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Flex ve Bison&lt;/h2&gt;
&lt;p&gt;Her ne kadar Flex ve Bison iki ayrı program olsa da, neredeyse her zaman birlikte kullanılırlar. Bu programlar,
kendi dosya formatlarında yazılmış metinleri, lexer ve parser olarak ifade edilen C programlarına dönüştürürler.
Lexer'ın görevi, verilen metin dosyasını, token dediğimiz parçalara bölmektir. Token'in ne olduğu, işleyeceğimiz
metin formatına göre değişebilir. Şimdilik token'lerine ayırmayı, metni kelimelerine bölmek olarak düşünebiliriz.
Parser'ın görevi ise, tokenleri gramer kurallarına uygun olarak analiz etmektir. Eğer lexer'in görevini
metni kelimelerine ayırmak olarak düşünürsek, parser'ın görevini de kelimelerden cümleler, cümlelerden paragraflar,
paragraflardan da makaleler oluşturacak şekilde tokenleri gramer kurallarına uygun gruplara ayırmak olarak düşünebiliriz.&lt;/p&gt;
&lt;h2&gt;Flex Programının Anatomisi&lt;/h2&gt;
&lt;p&gt;Detaylara girmeden önce, yazılabilecek en küçük flex dosyalarından birini inceleyerek başlayalım.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getlogin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Yukarıdaki 2 satırı &lt;code&gt;example.l&lt;/code&gt; adıyla kaydedin. Bu dosyadan Lexer oluşturmak için, aşağıdaki komutu kullanacağız.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;lex example.l
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;lex&lt;/code&gt; programının çıktı dosyasının adı &lt;code&gt;lex.yy.c&lt;/code&gt;'dir. Bu &lt;code&gt;.c&lt;/code&gt; dosyasını derleyip, flex kütüphanesiyle linklememiz gerekiyor.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;gcc lex.yy.c -lfl
&lt;/pre&gt;


&lt;p&gt;Sizin sisteminizde flex kütüphanesinin adı farklı olabilir. Linkleme hatası ile karşılaşırsanız, &lt;code&gt;-lfl&lt;/code&gt; yerine &lt;code&gt;-ll&lt;/code&gt;
ile deneyebilirsiniz. Derlenen programı (gcc ile derlediyseniz &lt;code&gt;a.out&lt;/code&gt;) çalıştırdığınızda, sizden birşeyler yazmanızı
bekleyecektir. &lt;code&gt;merhaba username&lt;/code&gt; yazarak &lt;code&gt;enter&lt;/code&gt; tuşuna basarsanız, username kelimesinin yerine, login sahibi kullanıcının
adı gelmiş şekilde size çıktı verecektir. CTRL^D tuş kombinasyonu ile programdan çıkabilirsiniz.&lt;/p&gt;
&lt;p&gt;Örnekte de gördüğünüz gibi, bir flex dosyasında, kurallar ve bunlara karşılık gelen C kodlarını tanımlarız. Kuralları tanımlamak için, düzenli ifadeler kullanırız. Bu örnekte,
metin içinde &lt;code&gt;username&lt;/code&gt; ile eşleşme sağlandığında, &lt;code&gt;printf("%s", getlogin());&lt;/code&gt; C kodu çalışacak. Böylece, &lt;code&gt;username&lt;/code&gt;
geçen yerleri, kullanıcının login adıyla değiştirmiş olduk. Hiçbir kuralla eşleşmeyen &lt;code&gt;merhaba&lt;/code&gt; kelimesi, çıktı
olarak kopyalanır.&lt;/p&gt;
&lt;p&gt;Pratikte göreceğiniz flex dosyaları, bundan daha karmaşık olacaktır. Daha normal bir örnek görmek isterseniz,
&lt;a href="http://www.quut.com/c/ANSI-C-grammar-l-1998.html"&gt;C Programlama Dili için hazırlanmış Lex dosyasını&lt;/a&gt; inceleyebilirsiniz.&lt;/p&gt;
&lt;p&gt;Bir lex dosyası, en az 1, en çok 3 kısımdan oluşur. Kısımlar birbirinden &lt;code&gt;%%&lt;/code&gt; işareti ile ayrılır. Birinci kısımda,
genel tanımlamalar yapılır. Bu kısımda doğrudan C kodu kullanmak isterseniz, &lt;code&gt;%{&lt;/code&gt; ve &lt;code&gt;%}&lt;/code&gt; işaretleri arasına
yazmanız gerekiyor. Bu kısma yazdığınız C kodları, oluşan &lt;code&gt;lex.yy.c&lt;/code&gt; dosyasının üst kısımlarına kopyalanır. Bu nedenle,
&lt;code&gt;#include&lt;/code&gt; ifadesi kullanmak isterseniz, bu kısımda kullanmalısınız. İkinci kısımda,
kuralları ve kurallara karşılık glen C kodlarını tanımlıyoruz. Üçüncü kısımda ise, istediğiniz C kodunu yazabilirsiniz.
Burada yazdığınız C kodları da olduğu gibi &lt;code&gt;lex.yy.c&lt;/code&gt; dosyasına kopyalanacak.
Bu 3 kısımdan sadece ikincisi zorunlu. Eğer birinci kısmı boş bırakacaksanız, ikinci kısma geçtiğinizin anlaşılması için dosyaya
&lt;code&gt;%%&lt;/code&gt; ile başlamanız gerekiyor.&lt;/p&gt;
&lt;p&gt;Aşağıda biraz daha gelişmiş bir Lex dosyası örneği var. Bu kodları test etmek için, &lt;code&gt;example2.l&lt;/code&gt; adında bir dosya oluşturup,
aşağıdaki içeriği içine kopyalayın. Bu programı derlerken, &lt;code&gt;main&lt;/code&gt; ve &lt;code&gt;yywrap&lt;/code&gt; fonksiyonlarını biz sağladığımız için, flex
kütüphanesi ile &lt;span style="text-decoration: underline"&gt;linklememeniz&lt;/span&gt; gerekiyor. Bu aşamada &lt;code&gt;yywrap&lt;/code&gt; fonksiyonunun
işlevi önemli değil. Olduğu gibi kabul edin. Kullandığımız &lt;code&gt;yylex&lt;/code&gt; fonksiyonu ise, flex tarafından
sağlanan ve asıl işi yapan fonksiyon.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;%%&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;num_lines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;num_chars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;num_chars&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;yylex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"satir sayisi = %d, karakter_sayisi = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_chars&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yywrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Tebrikler, Lex kullanarak, metin belgesindeki karakterleri ve satırları sayan bir program ürettiniz.&lt;/p&gt;
&lt;h2&gt;Bison Programının Anatomisi&lt;/h2&gt;
&lt;p&gt;Bison dosyaları da, Flex dosyaları gibi &lt;code&gt;%%&lt;/code&gt; ile ayrılmış 3 kısımdan oluşur. Aynı şekilde, birinci kısımda
tanımlamalar, ikinci kısımda kurallar, üçüncü kısımda ise, istediğimiz C kodları bulunuyor. Kuralların
hangi formatta yazılacağına, bu yazının devamında uygulamalı olarak değineceğiz.&lt;/p&gt;
&lt;h2&gt;JSON Formatı&lt;/h2&gt;
&lt;p&gt;JSON (JavaScript Object Notation) programlar arası veri alışverişinde yaygın olarak
kullanılan sade ve kompakt bir formattır. JSON formatında 6 çeşit veri türü ifade edilebilir.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String (Örn. "Bu bir string")&lt;/li&gt;
&lt;li&gt;Sayı   (Örn. 12.57)&lt;/li&gt;
&lt;li&gt;Boolean (true/false)&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;Object (Örn: {'key': 'value'})&lt;/li&gt;
&lt;li&gt;Array (Örn: [1,2,3])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C dilinde, herhangi bir JSON değerini tutabilecek bir veri yapısı, ve bu veri yapısı
üzerinde işlem yapacak bir kütüphane tasarlamak geniş bir konu olduğundan, bu yazıda
tasarlanan parser'ı sadece JSON nesnelerinin türünü konsola çıktı vermek için kullanacağız. Burada
oluşturacağımız Parser ile birlikte çalışacak JSON kütüphanesini, önümüzdeki günlerde
yazmayı planladığım ayrı bir blog yazısına bırakıyorum.&lt;/p&gt;
&lt;h2&gt;Tokenler&lt;/h2&gt;
&lt;p&gt;JSON grameri için, aşağıdaki tokenleri kullanacağız;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Şu karakterler: &lt;code&gt;[{:,}]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bu tokenlerin arasında kalan boşluk, tab, yeni satır gibi karakterleri göz ardı edeceğiz.&lt;/p&gt;
&lt;h2&gt;Projenin İskeleti&lt;/h2&gt;
&lt;p&gt;Yazıyı takip etmeyi kolaylaştırmak için, &lt;a href="http://ysar.net/jsonparser-skeleton.tar.gz"&gt;hazırladığım proje iskeletini&lt;/a&gt;
indirerek, arşivi açtıktan sonra, &lt;code&gt;./configure&lt;/code&gt; komutu ile projeyi derleme
aşamasına getirebilirsiniz. Eğer sisteminizde C derleyicisi, flex ve bison programlarından biri eksikse,
&lt;code&gt;configure&lt;/code&gt; programı hata verecektir. Proje iskeletinin içinde bizi ilgilendiren 2 dosya var; &lt;code&gt;lexer.l&lt;/code&gt; ve &lt;code&gt;parser.y&lt;/code&gt;.
&lt;code&gt;lexer.l&lt;/code&gt; flex programı tarafından okunup lexer kodlarını, &lt;code&gt;parser.y&lt;/code&gt; de bison tarafından okunup parser
kodlarını oluşturacak. İskelet proje içindeki diğer dosyalar build sisteminin bir parçası olduğundan, detayları
bu yazının konusunun dışında kalıyor. İskelet projeyi indirmeden devam etmek isteyenler için, &lt;code&gt;lexer.l&lt;/code&gt; ve
&lt;code&gt;parser.y&lt;/code&gt; nin şablonları aşağıdaki şekilde;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lexer.l&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"parser.h" // bison -d tarafından otomatik oluşturuluyor&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;%%&lt;/span&gt;

&lt;span class="o"&gt;%%&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yywrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;parser.y&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yylex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;yyparse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;yyerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="n"&gt;NEWLINE&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;
&lt;span class="nl"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NEWLINE&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;yyerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Parse error: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;İşe Koyulalım&lt;/h2&gt;
&lt;p&gt;Tanıyacağımız tokenleri &lt;code&gt;parser.y&lt;/code&gt; içine ekleyerek başlayacağız. Bunun için iskelet projedeki &lt;code&gt;parser.y&lt;/code&gt;
dosyasındaki &lt;code&gt;%start&lt;/code&gt; ve &lt;code&gt;%token&lt;/code&gt; ile başlayan satırları silerek, bunun yerine aşağıdaki satırları ekleyin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%start&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;
&lt;span class="nf"&gt;%token&lt;/span&gt; &lt;span class="n"&gt;T_STRING&lt;/span&gt; &lt;span class="n"&gt;T_NUMBER&lt;/span&gt; &lt;span class="n"&gt;T_TRUE&lt;/span&gt; &lt;span class="n"&gt;T_FALSE&lt;/span&gt; &lt;span class="n"&gt;T_NULL&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Tek karakterden oluşan tokenler için (virgül, süslü parantez vs.), token tanımı yapmaya gerek yok.
Yukarıda &lt;code&gt;%start&lt;/code&gt; ile başlayan satırda, gramer'in başlangıç sembolünü de değiştirdiğimiz için,
&lt;code&gt;parser.y&lt;/code&gt; içinde &lt;code&gt;line:&lt;/code&gt; ile başlayan satırı da aşağıdaki şekilde değiştirin;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T_STRING&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NUMBER&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_TRUE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_FALSE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NULL&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Burada, gramer'imizin başlangıç kuralını da belirlemiş olduk. &lt;code&gt;JValue&lt;/code&gt; kuralını &lt;code&gt;%start&lt;/code&gt; kuralı
olarak belirlediğimiz için, parser'ımız tüm girdisini bir &lt;code&gt;JValue&lt;/code&gt;'ya indirgemeyi deneyecek.
Kuralı tanımlarken kullandığımız "|" işareti, düzenli ifadelerde olduğu gibi, seçenek ifade ediyor.
İlk kuralı kelimelerle ifade etmek gerekirse, &lt;code&gt;JValue&lt;/code&gt; bir T_STRING, ya da bir T_NUMBER, ya da bir T_TRUE, ya da bir T_FALSE, ya
da bir T_NULL olabilir. Array ve Object türleri daha karmaşık olduğu için, onları sonraki adımlarda
ekleyeceğiz.&lt;/p&gt;
&lt;p&gt;Parser &lt;code&gt;T_STRING&lt;/code&gt;, &lt;code&gt;T_NUMBER&lt;/code&gt; gibi tokenleri, lexer'dan bekleyecek. Basit
tokenleri lexer'a tanımlayarak başlayalım. Projedeki &lt;code&gt;lexer.l&lt;/code&gt; dosyasını açıp, iki &lt;code&gt;%%&lt;/code&gt; arasındaki boş satıra,
aşağıdaki satırları ekleyin;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;":" { return ':'; }
"," { return ','; }
"{" { return '{'; }
"}" { return '}'; }
"[" { return '['; }
"]" { return ']'; }
"null"  { return T_NULL; }
"true"   { return T_TRUE; }
"false"  { return T_FALSE; }
[ \t\n\r]+ { /* ignore */ }
&lt;/pre&gt;


&lt;p&gt;Program şu an derlenebilir aşamada, ancak, herhangi bir çıktı vermediğimiz
için, ne başardığımızı test edemiyoruz. &lt;code&gt;parser.y&lt;/code&gt; dosyası içindeki kuralları, aşağıdaki
şekilde güncelleyin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T_STRING&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"String"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NUMBER&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Number"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_TRUE&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"TRUE"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_FALSE&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FALSE"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NULL&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"NULL"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Nasıl lexer dosyasına eşleşme sağlandığında çalışacak kodlar ekleyebiliyorsak, parser
dosyasına da yukarıdaki örnekte olduğu gibi, kod ekleyebiliyoruz. Böylece, bir eşleşme olduğunda,
konsolda çıktı görebileceğiz. Parser'ımızın çalışması için, &lt;code&gt;main&lt;/code&gt; fonksiyonuna, &lt;code&gt;yyparse&lt;/code&gt; çağrısı
eklemek gerekiyor.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;int main(void) {
    yyparse();
    return 0;
}
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;yyparse&lt;/code&gt; fonksiyonu, bison tarafından sağlanan ve parser'ı çalıştıran fonksiyon. Artık projeyi derleyip (&lt;code&gt;make&lt;/code&gt; komutu ile)
aşağıdaki komutlarla test edebilirsiniz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;echo "true" | ./jsonparser
echo "false" | ./jsonparser
echo "null" | ./jsonparser
echo "   true   " | ./jsonparser
echo "yok" | ./jsonparser
&lt;/pre&gt;


&lt;p&gt;Basit tokenleri bitirdikten sonra, düzenli ifade kullanmak zorunda kalacağımız
tokenlere geçebiliriz. Önce, String ile eşleşen bir düzenli ifade ile başlayalım. &lt;code&gt;lexer.l&lt;/code&gt;
içine, aşağıdaki satırı ekleyip, programı tekrar derleyin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;\"(\\.|[^\\"\n])*\" { return T_STRING; }
&lt;/pre&gt;


&lt;p&gt;Aşağıdaki şekilde, programı test edebilirsiniz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;echo "   \"metin var\"  " | ./jsonparser
&lt;/pre&gt;


&lt;p&gt;Program çalıştığında konsolda "String" çıktısını göreceksiniz, ancak, &lt;code&gt;lexer.l&lt;/code&gt;
içindeki düzenli ifademiz çok karmaşık görünüyor. Bunu çözmek için,
&lt;code&gt;lexer.l&lt;/code&gt;'nin birinci kısmında bazı tanımlamalar yapacağız. Aşağıdaki kodları,
&lt;code&gt;lexer.l&lt;/code&gt;'deki ilk &lt;code&gt;%%&lt;/code&gt; işaretinden hemen önce gelecek şekilde dosyaya ekleyin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;TIRNAK ["]
BIRKARAKTER .
TERSTAKSIM \\
KACMAKARAKTER {TERSTAKSIM}{BIRKARAKTER}
NORMALKARAKTER [^\\"\b\f\n\r\t]
KARAKTER {NORMALKARAKTER}|{KACMAKARAKTER}
KARAKTERLER {KARAKTER}+
&lt;/pre&gt;


&lt;p&gt;Böylece, &lt;code&gt;\"(\\.|[^\\"\n])*\"&lt;/code&gt; düzenli ifadesinin yerine, &lt;code&gt;{TIRNAK}{TIRNAK}|{TIRNAK}{KARAKTERLER}{TIRNAK}&lt;/code&gt;
yazabilirsiniz. Bu sayede, düzenli ifademiz çok daha okunaklı olur. &lt;code&gt;T_STRING&lt;/code&gt; tokenimiz ile standart JSON
string'i arasındaki küçük farklılıkları, yazıyı kısa tutmak adına dikkate almayacağım. &lt;code&gt;T_NUMBER&lt;/code&gt; ile devam edelim.
Önce aşağıdaki tanımları, &lt;code&gt;lexer.l&lt;/code&gt;'nin tanımlar kısmına ekleyin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;ONDALIK [.]
POZITIFRAKAM [1-9]
SIFIR 0
RAKAM {SIFIR}|{POZITIFRAKAM}
E     [eE]
EXP   {E}[-+]?{RAKAM}+
FRAC  {ONDALIK}{RAKAM}+
INT   {SIFIR}|{POZITIFRAKAM}{RAKAM}*
&lt;/pre&gt;


&lt;p&gt;Bu tanımlamaları yaptıktan sonra, aşağıdaki kuralı, kurallar kısmına ekleyip, projeyi tekrar test edebiliriz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;[-]?{INT}{FRAC}?{EXP}?          { return T_NUMBER; }
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;lexer&lt;/code&gt; artık &lt;code&gt;T_NUMBER&lt;/code&gt; tokeni de gönderebildiğine göre, &lt;code&gt;lexer.l&lt;/code&gt; ile daha fazla işimiz kalmadı. &lt;code&gt;parser.y&lt;/code&gt; içinde
hala Object ve Array türlerini tanımlamadık. Önce, Array ile başlayalım. &lt;code&gt;parser.y&lt;/code&gt; içinde kuralları aşağıdaki şekilde
yeniden düzenleyin.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T_STRING&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"String"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NUMBER&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Number"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_TRUE&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"TRUE"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_FALSE&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FALSE"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NULL&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"NULL"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;JArray&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Array"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;

&lt;span class="n"&gt;JArray&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;
      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="n"&gt;Liste&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;

&lt;span class="n"&gt;Liste&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;
     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Liste&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Programı derleyip, şu komutla test ederseniz, aşağıdaki gibi bir çıktı göreceksiniz: &lt;code&gt;echo "[1, 2, 3, true, false, null ]" | ./jsonparser&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Number
Number
Number
TRUE
FALSE
NULL
Array
&lt;/pre&gt;


&lt;p&gt;Eğer konsolda tek bir satır çıktı görmeyi beklediyseniz, şaşırmış olabilirsiniz. Yazdığımız kurallara
dikkat ederseniz, &lt;code&gt;JValue&lt;/code&gt; sembolü her oluştuğunda, konsola hangi türden bir &lt;code&gt;JValue&lt;/code&gt; oluştuğunu
yazıyoruz. &lt;code&gt;JArray&lt;/code&gt; içinde de sınırsız sayıda &lt;code&gt;JValue&lt;/code&gt; bulunabildiği için, bunlara ait çıktıları
da konsolda göreceğiz. Köşeli parantez kapama tokeni (&lt;code&gt;]&lt;/code&gt;) gelene kadar &lt;code&gt;JArray&lt;/code&gt; tanımı eksik
kaldığı için, konsolda "Array" çıktısını en son görüyoruz.&lt;/p&gt;
&lt;p&gt;Burada ilk kez birden fazla tokenden üretilen bir sembol tanımı yapmış olduk. &lt;code&gt;JValue&lt;/code&gt; örneğinde,
tek bir T_STRING tokeni, bir &lt;code&gt;JValue&lt;/code&gt; tanımlamak için yeterli iken, bir &lt;code&gt;JArray&lt;/code&gt; için en azından
ardarda gelmiş &lt;code&gt;[&lt;/code&gt; ve &lt;code&gt;]&lt;/code&gt; tokenleri gerekiyor.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JArray&lt;/code&gt; içinde geçen &lt;code&gt;Liste&lt;/code&gt; sembolü de, tanımladığımız ilk özyinelemeli (eng. recursive) sembol oldu.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Liste&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;
     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Liste&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="n"&gt;JValue&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Burada şunu ifade etmiş oluyoruz; tek başına &lt;code&gt;JValue&lt;/code&gt; bir &lt;code&gt;Liste&lt;/code&gt; tanımlar, ya da, &lt;code&gt;Liste&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;JValue&lt;/code&gt;
yanyana geldiğinde bir liste tanımlar. Böyle bir gramer, bir veya daha fazla &lt;code&gt;JValue&lt;/code&gt; değerinin birbirine
&lt;code&gt;,&lt;/code&gt; ile bağlanarak bir liste oluşturduğunu ifade ediyor.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object&lt;/code&gt; türünün gramer tanımı da, &lt;code&gt;JArray&lt;/code&gt;'e çok yakın;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;JObject: '{' '}'
       | '{' KVListe '}'

KVListe: KV
       | KVListe ',' KV

KV: T_STRING ':' JValue
&lt;/pre&gt;


&lt;p&gt;Bunun tek farkı, süslü parantezler içinde değerler listesi değil de, anahtar-değer çiftleri listesi var. &lt;code&gt;JValue&lt;/code&gt;
tanımını da aşağıdaki şekilde güncelledikten sonra, programı yeniden derleyebiliriz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JValue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T_STRING&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"String"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NUMBER&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Number"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_TRUE&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"TRUE"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_FALSE&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"FALSE"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;T_NULL&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"NULL"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;JArray&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Array"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;JObject&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Object"&lt;/span&gt;&lt;span class="o"&gt;);}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Bu programı, &lt;code&gt;echo "{\"sayi\":12, \"liste\": [true, false, null]}" | ./jsonparser&lt;/code&gt; komutu
ile test ederseniz, ekrana aşağıdaki çıktıyı alacaksınız.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Number
TRUE
FALSE
NULL
Array
Object
&lt;/pre&gt;


&lt;p&gt;Dikkat ederseniz, çıktının hiçbir yerinde String ifadesi geçmiyor. Anahtar-değer çiftlerinde
anahtar görevi gören string'ler, kendi başlarına bir JValue ifade etmediği için, konsolda
çıktı olarak da göremiyoruz.&lt;/p&gt;
&lt;p&gt;Böylece, JSON formatındaki veriyi tarayan programı bitirmiş olduk. Bu yazıda, ekranda çıktı göstermek dışında,
faydalı bir iş yapmasak da, lexer ve parser kullanarak bir metni taramayı başardık. Bu serinin ikinci kısmında,
Parser'ımızla bir JSON kütüphanesini bir araya getirip, validasyon/formatlama/başka türe dönüştürme
gibi konulara değinmeyi düşünüyorum.&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/yazilim-dunyasi/flex-bison.html</guid><pubDate>Wed, 26 Jun 2019 07:25:00 GMT</pubDate></item><item><title>Autotools Gizemini Çözüyoruz</title><link>http://ysar.net/yazilim-dunyasi/autotools.html</link><dc:creator>Yaşar Arabacı</dc:creator><description>&lt;div&gt;&lt;p&gt;Autotools, GNU build sistemi oluşturmaya yarayan araçlar grubudur. GNU/Linux sistemlerde
antik çağlardan beri yazılım geliştirme ve paylaşma macerasının merkezinde
olmuş &lt;code&gt;autotools&lt;/code&gt; programlarını anlamak, hem gnu/linux sistemlerine kurulacak yazılımları yapmak
isteyenlerin, hem de linux dağıtımlarına paket oluşturmak isteyenlerin işine
yarayacaktır. Autotools adını ilk kez duyuyor olabilirsiniz ama, Eğer linux üzerinde kaynak
koddan program derleyip kurmuşsanız, aşağıdaki 3 komutu muhakkak biliyorsunuz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;./configure
make
make install
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;tar.gz&lt;/code&gt; dosyası bir klasöre açılır, o klasörün içine &lt;code&gt;cd&lt;/code&gt; ile geçilir, esrarengiz komutlar
verilir ve, Hollywood filmlerindeki hacker sahnelerini andıran yazıları izledikten sonra,
programımız derlenir ve kullanmaya başlarız.&lt;/p&gt;
&lt;p&gt;Bu yazıda, GNU/Linux işletim sistemlerinde kaynak kod dağıtma, derleme ve yükleme sisteminin bel kemiğini
oluşturan &lt;code&gt;autotools&lt;/code&gt; araçlarını kullanmaya yetecek kadar teorik bilgi ve örnek verme niyetindeyim. Hedefim autotools'un
girift detaylarına inmekten ziyade, bu ismi ilk kez duyanları, referans belgelere başvurarak ihtiyaçlarını
karşılayabilecek aşamaya getirecek kadar bu programları tanıtmak.&lt;/p&gt;
&lt;p&gt;Autotools araçları, yazdığımız programları, &lt;code&gt;./configure&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt; ve &lt;code&gt;make install&lt;/code&gt; ile çeşitli unix nevinden
sistemlerde derlenip kurulabilmesi için, &lt;code&gt;./configure&lt;/code&gt; programını, &lt;code&gt;Makefile&lt;/code&gt; dosyalarını ve konfigürasyon 
dosyalarını (genellikle config.h) üretmeye yarar. Bu nedenle, öncelikle bu 3 komutun vazifelerini hatırlamakta
fayda var. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;configure&lt;/code&gt; programı aslında POSIX standardında yazılmış bir kabuk betiğidir. Bu betik,
programımızın derleneceği platformun niteliklerini anlamak için bir takım testler yaparak,
gerekli araç ve kütüphanelerin varlığını teyit eder. Eğer derlenecek programın derlenebilmesi
için gerekli program, kütüphane ve araçlar sistemde mevcutsa, yaptığı testlerin sonuçlarını ve
komut satırından aldığı argümanların değerlerini kullanarak &lt;code&gt;Makefile&lt;/code&gt; dosyalarını ve konfigürasyon
dosyalarını (genellikle &lt;code&gt;config.h&lt;/code&gt;) oluşturur. &lt;code&gt;configure&lt;/code&gt; programının başarılı sonuçlanması,
programımızın başarıyla derlenip kurulabileceğini gösterir.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; programı, &lt;code&gt;Makefile&lt;/code&gt; dosyasında tanımlanan görevleri yerine getirir. Autotools
tarafından oluşturulan &lt;code&gt;Makefile&lt;/code&gt; dosyasında birçok görev tanımlanır. &lt;code&gt;make&lt;/code&gt; komutu
herhangi bir argüman verilmeden çalıştırıldığında, &lt;code&gt;Makefile&lt;/code&gt; içindeki öntanımlı (eng. default)
hedefi yerine getirir. Autotools tarafından üretilen &lt;code&gt;Makefile&lt;/code&gt; dosyasındaki öntanımlı görev
programın derlenmesidir.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt; programı &lt;code&gt;install&lt;/code&gt; hedefiyle birlikte çalıştığında, derlenmiş program, kütüphane,
belgeler, header dosyaları ve diğer dosyalar ilgili klasörlere yüklenir. Bunların yükleneceği yer, &lt;code&gt;configure&lt;/code&gt;
aşamasında özellikle değiştirilmezse, &lt;code&gt;/bin&lt;/code&gt;, &lt;code&gt;/lib&lt;/code&gt; vs. gibi standart yollardır.&lt;/p&gt;
&lt;p&gt;Şimdi, &lt;code&gt;autotools&lt;/code&gt; kullanarak, bir &lt;code&gt;Hello World&lt;/code&gt; uygulaması yapalım. Bu uygulama 5 adımdan oluşacak.&lt;/p&gt;
&lt;p&gt;Birinci adımda, kaynak kodlarını içerek klasörü oluşturup, bu klasöre geçeceğiz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;mkdir helloworld
&lt;span class="nb"&gt;cd&lt;/span&gt; helloword
&lt;/pre&gt;


&lt;p&gt;İkinci adımda, derlenecek programı yazacağız. &lt;code&gt;main.c&lt;/code&gt; adında bir dosya oluşturup, aşağıdaki
programı kopyalayın.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;"config.h"&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bu program: "&lt;/span&gt; &lt;span class="n"&gt;PACKAGE_STRING&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Üçüncü adımda, &lt;code&gt;Makefile.am&lt;/code&gt; dosyası oluşturup, aşağıdaki satırları yazın.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;bin_PROGRAMS = hello
hello_SOURCES = main.c
&lt;/pre&gt;


&lt;p&gt;Dördüncü adımda, &lt;code&gt;configure.ac&lt;/code&gt; dosyasını aşağıdaki gibi oluşturun.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;AC_INIT([helloworld],[1.0],[bug-reports@helloworld.com])
AM_INIT_AUTOMAKE([foreign])
AC_PROG_CC
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
&lt;/pre&gt;


&lt;p&gt;Son olarak, &lt;code&gt;autoreconf --install&lt;/code&gt; komutu ile, build sistemimiz hazır hale geliyor. Bu aşamada, &lt;code&gt;./configure&lt;/code&gt;
ve &lt;code&gt;make&lt;/code&gt; komutlarıyla programınızı derleyip, çıktısını inceleyebilirsiniz.&lt;/p&gt;
&lt;p&gt;Eğer elinizde imkan varsa, yazının devamını okumadan önce, yukarıdaki örneği denemenizi tavsiye ederim. Yazının
devamında, bir adım geri gidip, bu örnekte neler olup bittiğine biraz daha yakından bakacağız.&lt;/p&gt;
&lt;p&gt;Yazının başından beri, &lt;code&gt;autotools&lt;/code&gt;'un bir araçlar grubu olduğundan bahsettik, ancak, bu araçların hangileri
olduğuna hiç değinmemiştik. Bu araçların başlıca 2 tanesi, &lt;code&gt;autoconf&lt;/code&gt;, &lt;code&gt;automake&lt;/code&gt; diyebiliriz.
Bunlardan &lt;code&gt;autoconf&lt;/code&gt; programı, otomatik olarak &lt;code&gt;configure&lt;/code&gt; betiği oluşturmaya, &lt;code&gt;automake&lt;/code&gt; programı otomatik
olarak &lt;code&gt;Makefile&lt;/code&gt; oluşturmaya yarıyor. Şu aşamada, &lt;code&gt;autotools&lt;/code&gt; içindeki diğer programları yardımcı araçlar
olarak düşünebiliriz. Autotools içindeki araçları birbirinden bağımsız programlar olarak düşünmemelisiniz.
Bunların birbiriyle çok sıkı ve karmaşık ilişkileri var. Bu ilişkileri yazının devamında biraz daha detaylı inceleyeceğiz.&lt;/p&gt;
&lt;p&gt;Öncelikle, &lt;code&gt;autoconf&lt;/code&gt; programını inceleyelim. Bu program, &lt;code&gt;configure.ac&lt;/code&gt; dosyasını okuyarak, &lt;code&gt;configure&lt;/code&gt;
programını oluşturur. &lt;code&gt;configure&lt;/code&gt; programının amacından yukarıda bahsettiğim için, konuyu doğrudan &lt;code&gt;configure.ac&lt;/code&gt;
dosyasına getireceğim. Bu dosyayı, M4 makroları içeren bir kabuk (shell) betiği olarak tanımlayabiliriz.
M4 çok eski bir şablon dilidir. &lt;code&gt;configure.ac&lt;/code&gt; içindeki M4 makroları, &lt;code&gt;autoconf&lt;/code&gt; tarafından shell
programına dönüştürülür. Bu makrolar, bir veya daha fazla argüman alabilir. Bu argümanların da
bazıları gerekli, bazıları ise seçmeli olabilir. Bunları, makro adından sonra gelen
parantezler içinde virgülle ayrılmış olarak belirtiriz. Ayrıca, her bir argümanı köşeli
parantezler içine alırız. &lt;code&gt;configure.ac&lt;/code&gt; dosyasında kendi yazdığınız makroları kullanabileceğiniz
gibi, &lt;code&gt;autotools&lt;/code&gt; tarafından sağlanan makroları da kullanabilirsiniz. &lt;code&gt;autotools&lt;/code&gt; içinde o kadar çok
hazır makro var ki, ihtiyacınız olan makroyu hazır olanlar içinde bulamamanız mümkün olsa da muhtemel değil.
Bu yazıda, nasıl makro yazabileceğimiz konusuna değinmeyeceğiz.&lt;/p&gt;
&lt;p&gt;Örneğimizdeki &lt;code&gt;configure.ac&lt;/code&gt; dosyası, sadece makrolardan oluşuyor. Sırayla bu makroların gereğine ve 
aldıkları argümanlara göz atalım. &lt;code&gt;AC_INIT&lt;/code&gt; makrosu, ikisi zorunlu üçü seçmeli olmak üzere 5 argüman
alabiliyor. Bu makronun görevi, &lt;code&gt;configure&lt;/code&gt; programının aldığı komut satırı argümanlarını işlemek
ve programı kullanılabilir hale getirmek. Eğer ne yaptığınızı çok iyi bilmiyorsanız, &lt;code&gt;configure.ac&lt;/code&gt;
dosyasına daima &lt;code&gt;AC_INIT&lt;/code&gt; makrosuyla başlayın. Bu makronun ilk argümanı paketinizin ismini, ikinci
argümanı ise paketinizin versiyonunu içerir. Bu makro hakkında daha detaylı bilgiyi &lt;a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Initializing-configure.html"&gt;Autoconf Belgelerinde&lt;/a&gt; bulabilirsiniz.&lt;/p&gt;
&lt;p&gt;Kullandığımız ikinci makro, &lt;code&gt;AM_INIT_AUTOMAKE&lt;/code&gt;. Bu makro, &lt;code&gt;automake&lt;/code&gt; programına ayar vermek için kullanılır.
Burada &lt;code&gt;foreign&lt;/code&gt; seçeneğini kullanmamızın nedeni, yazdığımız
programın GNU standartlarına uymadığını belirtmek. Eğer bu seçeneği belirtmezsek, README, NEW, AUTHORS
gibi tüm standart dosyaları oluşturmak zorunda kalırız. Bu makro hakkında daha fazla detaya şu an için
gerek yok.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AC_PROG_CC&lt;/code&gt; makrosu, sistemde çalışan bir C derleyicisi bulur.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AC_CONFIG_HEADERS&lt;/code&gt; makrosu, bir konfigürasyon header dosyası (Örnekte config.h) oluşturur. Bu header içindeki tanımlamalar,
daha önce çalışan makrolardan elde edilir. Örneğin, &lt;code&gt;AC_INIT&lt;/code&gt; makrosu tarafından ayarlanan paketin adı
ve versiyonu gibi bilgiler, bu header dosyasına yazılır. Böylece, C programımızın içinde bu bilgilere
ulaşabiliriz.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AC_CONFIG_FILES&lt;/code&gt; makrosu ile, &lt;code&gt;configure&lt;/code&gt; programının oluşturacağı dosyalar belirtilir. Bu dosyalar
&lt;code&gt;.in&lt;/code&gt; uzantılı olarak aranır, işlendikten sonra &lt;code&gt;.in&lt;/code&gt; uzantısı olmadan kaydedilir. Bizim örneğimizde,
&lt;code&gt;Makefile.in&lt;/code&gt; dosyası, &lt;code&gt;Makefile&lt;/code&gt; dosyasına dönüşecek. Bu dönüşüm işleminde pek matah birşey yok. &lt;code&gt;Makefile.in&lt;/code&gt;
dosyasının içinde iki @ işareti arasında belirtilen değişkenler doldurulacak. Bu değişkenlerin değeri de,
çalışan makrolar tarafından belirleniyor. Mesela, &lt;code&gt;CC&lt;/code&gt; değişkeni, &lt;code&gt;AC_PROG_CC&lt;/code&gt; makrosu sayesinde tanımlanıyor.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AC_OUTPUT&lt;/code&gt; makrosu, &lt;code&gt;config.status&lt;/code&gt; isminde bir shell programı oluşturup, bu programı çalıştırır.
&lt;code&gt;Makefile&lt;/code&gt; ve &lt;code&gt;config.h&lt;/code&gt; dosyalarının oluşması gibi görevler &lt;code&gt;config.status&lt;/code&gt; tarafından gerçekleştiği
için, bu makronun kullanılması zaruridir.&lt;/p&gt;
&lt;p&gt;Devam etmeden önce, biraz toparlayalım. &lt;code&gt;autoconf&lt;/code&gt; programı &lt;code&gt;configure.ac&lt;/code&gt; dosyasını okuyarak,
&lt;code&gt;configure&lt;/code&gt; kabuk programını oluşturuyor. &lt;code&gt;configure&lt;/code&gt; programının amacı ise, platformun
özelliklerini test edip, Makefile ve config.h dosyalarını oluşturmak.&lt;/p&gt;
&lt;p&gt;Autotools içinde merkezi yeri olan diğer program da, &lt;code&gt;automake&lt;/code&gt;'dir. Bu program, &lt;code&gt;Makefile.am&lt;/code&gt;
dosyalarındaki tanımlamalara göre, &lt;code&gt;Makefile.in&lt;/code&gt; dosyaları oluşturur. &lt;code&gt;Makefile.in&lt;/code&gt; dosyalarının
&lt;code&gt;configure&lt;/code&gt; betiği tarafından işlenip, &lt;code&gt;Makefile&lt;/code&gt; dosyalarına dönüştüğünü yukarıda belirmiştim.&lt;/p&gt;
&lt;p&gt;Örneğimizdeki &lt;code&gt;Makefile.am&lt;/code&gt; dosyası, sadece iki satırdan oluşuyor. İlk satırda, &lt;code&gt;bin_PROGRAMS = hello&lt;/code&gt;
tanımlaması, üç şey belirtiyor. Birincisi, o satırda tanımı yapılan hedefin &lt;code&gt;bindir&lt;/code&gt; klasörüne yükleneceği,
ikincisi bu hedefin bir program olduğu, üçüncüsü ise bunun adının hello olduğu. Burada &lt;code&gt;bin_&lt;/code&gt; olarak
belirtilen önek, yükleme yerini belirtir. &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt;,
&lt;code&gt;include&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt; gibi önceden tanımlı değerleri kullanabilirsiniz. Önekten sonra gelen kısım ise,
hedefin türünü belirtiyor. Hedef türü olarak, şunlardan birini seçmelisiniz; ‘PROGRAMS’, ‘LIBRARIES’,
‘LTLIBRARIES’, ‘LISP’, ‘PYTHON’, ‘JAVA’, ‘SCRIPTS’, ‘DATA’, ‘HEADERS’, ‘MANS’, ve ‘TEXINFOS’. Bunların
isimleri yeterince açıklayıcı. Her hedef türü doğru çalışabilmesi için, çeşitli değişkenlere
ihtiyaç duyar. &lt;code&gt;PROGRAMS&lt;/code&gt; hedef türü için, &lt;code&gt;_SOURCES&lt;/code&gt; değişkeni ile, programın hangi C dosyaları
kullanılarak derleneceğini belirttik. Eğer &lt;code&gt;_SOURCES&lt;/code&gt; ile kaynak dosyalarını belirtmezsek,
&lt;code&gt;automake&lt;/code&gt; bizim için tahminde bulunacaktır, ama, açıkca belirtmek daha güvenli olur. &lt;code&gt;configure.ac&lt;/code&gt;
örneğine geri dönerseniz, &lt;code&gt;AC_PROG_CC&lt;/code&gt; programı ile, geçerli bir C derleyecisi bulmuştuk. &lt;code&gt;PROGRAMS&lt;/code&gt;
haricindeki diğer hedef türleri için, &lt;code&gt;AC_PROG_CC&lt;/code&gt; benzeri bir kontrolü &lt;code&gt;configure.ac&lt;/code&gt;'ye eklemek
gerekebilir. Bunun detayları için, &lt;a href="https://www.gnu.org/software/automake/manual/automake.html"&gt;Automake Belgeleri&lt;/a&gt;
yeterince detaylı açıklamalar içeriyor.&lt;/p&gt;
&lt;p&gt;Sıra &lt;code&gt;main.c&lt;/code&gt; dosyasını incelemeye geldi. &lt;code&gt;main.c&lt;/code&gt; programında, &lt;code&gt;config.h&lt;/code&gt; header dosyasını kullandık.
Bu noktaya kadar dikkatle okuduysanız, &lt;code&gt;config.h&lt;/code&gt; dosyasının otomatik olarak oluşturulduğunu anlamışsınızdır.
Bu sayede, &lt;code&gt;configure&lt;/code&gt; aşamasında tanımlanan yapılandırma değerlerini, C kaynak kodlarımız içinde kullanabiliriz.
Örnek programımızda, &lt;code&gt;PACKAGE_STRING&lt;/code&gt; değişkenini kullandık. Bu değişken, &lt;code&gt;AC_INIT&lt;/code&gt; makrosu tarafından
tanımlanıyor. Bizim örneğimizde, &lt;code&gt;helloworld 1.0&lt;/code&gt; değerini alıyor.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;autoconf&lt;/code&gt; ve &lt;code&gt;automake&lt;/code&gt; programlardan bahsettik ama, dikkat ederseniz örneğimizde bu iki programı
hiç kullanmadık. Eğer &lt;code&gt;automake&lt;/code&gt; ve &lt;code&gt;autoconf&lt;/code&gt; programlarını manuel olarak tetiklemek isterseniz,
&lt;code&gt;autoheader&lt;/code&gt;, &lt;code&gt;aclocal&lt;/code&gt;, &lt;code&gt;autoconf&lt;/code&gt; ve &lt;code&gt;automake&lt;/code&gt; gibi programları doğru sırada çalıştırmanız gerekiyor.
Manuel çalıştırmak hataya çok müsait olduğu için, &lt;code&gt;autoreconf&lt;/code&gt; programı, &lt;code&gt;autotools&lt;/code&gt; içindeki diğer
araçları doğru şekilde çalıştırmaya yarıyor. &lt;/p&gt;
&lt;p&gt;Yeni başlayanlar için, &lt;code&gt;autotools&lt;/code&gt; çok yıpratıcı olabilir. Şu ana kadar, birçok yeni konseptle
karşılaştınız, ve kafanızın karışmış olması gayet normal. Ama başardığımız şeye dikkat edin.
6 satırlık bir &lt;code&gt;configure.ac&lt;/code&gt; ve 2 satırlık &lt;code&gt;Makefile.am&lt;/code&gt; ile, elle yazabileceğimizden
çok daha iyi bir &lt;code&gt;Makefile&lt;/code&gt; elde ettik. &lt;code&gt;make install&lt;/code&gt; hedefi sayesinde, programınızı
kurabilirsiniz, &lt;code&gt;configure&lt;/code&gt; aşamasında programın nereye kurulması gerektiğini seçebilirsiniz,
&lt;code&gt;make dist&lt;/code&gt; ile &lt;code&gt;tar.gz&lt;/code&gt; paketi oluşturabilirsiniz. Standart bir GNU/Linux paketinde olmasını
bekleyeceğiniz herşeyi, hem kolayca, hem de hataya fazla yer bırakmayacak bir şekilde elde ettik.
Bu da, Linux paket yöneticileri için, büyük kolaylık demek.&lt;/p&gt;
&lt;p&gt;Bu noktada, &lt;code&gt;autotools&lt;/code&gt; temellerini kavradığınızı varsayıyorum. Birkaç yeni örnek ile,
hem öğrendiklerimiz pekiştireceğiz, hem de &lt;code&gt;autotools&lt;/code&gt;'un diğer kabiliyetleri hakkında
bilgi sahibi olacağız.&lt;/p&gt;
&lt;p&gt;Diyelim ki, Linux üstünde çalışacak bir oyun programladınız. Yazdığınız oyunda grafik
ve ses dosyaları kullanmak isteyeceksiniz. Kullandığınız data dosyaları, farklı linux
sürümlerinde, farklı klasörlere yüklenebilir. Bu örnekte, C programımızın, data
klasöründeki dosyaları bulmasını sağlayacağız.&lt;/p&gt;
&lt;p&gt;Öncelikle, &lt;code&gt;Makefile.am&lt;/code&gt; dosyasına bakalım;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;bin_PROGRAMS = oyun
oyun_SOURCES = oyun.c
dist_pkgdata_DATA = esound.wav \
               another.wav \
               background.png
AM_CFLAGS = -DDATADIR=\"$(pkgdatadir)\"
&lt;/pre&gt;


&lt;p&gt;İlk iki satırı zaten biliyorsunuz. Üçüncü satırda, &lt;code&gt;pkgdata&lt;/code&gt; klasörüne yüklenecek olan,
&lt;code&gt;DATA&lt;/code&gt; dosyalarını tanımladık. Burada ikinci bir önek olarak &lt;code&gt;dist&lt;/code&gt; öneki kullandık. &lt;code&gt;DATA&lt;/code&gt;
dosyalarını &lt;code&gt;tar.gz&lt;/code&gt; dağıtımına dahil etmek için, &lt;code&gt;dist&lt;/code&gt; öneki kullanmalısınız. Üçüncü satırda,
C derleyicisinin komut satırına gönderilecek bir argüman tanımladık. Burada kullandığımız &lt;code&gt;pkgdatadir&lt;/code&gt;,
autoconf/automake tarafından ayarlanan bir değişken. Böylece, C dosyalarımızda kullanılabilecek bir makro
tanımı yapmış olduk. Şimdi, &lt;code&gt;oyun.c&lt;/code&gt; dosyasına bakalım.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IMAGE&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DATADIR&lt;/span&gt; &lt;span class="s"&gt;"/background.png"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Böylece, programımız ilgili data dosyalarını bulabilecek bir şekilde derlenmiş oldu.&lt;/p&gt;
&lt;p&gt;İyice pekiştirmek için, bir örnek daha yapalım. Bu örneğimizde, &lt;code&gt;configure&lt;/code&gt; betiğinin,
programımızın bazı özelliklerini açıp kapatabilmesini sağlayacağız. Öncelikle, &lt;code&gt;configure.ac&lt;/code&gt;
dosyasına, aşağıdaki iki satırı ekleyeceğiz.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AC_ARG_ENABLE&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;AS_HELP_STRING&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;]),[&lt;/span&gt;&lt;span class="n"&gt;ENABLE_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;enableval&lt;/span&gt;&lt;span class="p"&gt;],[&lt;/span&gt;&lt;span class="n"&gt;ENABLE_DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"no"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;AS_IF&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s"&gt;"x$ENABLE_DEBUG"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"xyes"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;AC_DEFINE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENABLE_DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Enable&lt;/span&gt; &lt;span class="n"&gt;Debugging&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Şimdi, &lt;code&gt;config.h.in&lt;/code&gt; dosyasına, aşağıdaki satırı eklememiz gerekiyor.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;#undef ENABLE_DEBUG
&lt;/pre&gt;


&lt;p&gt;Bundan sonra, &lt;code&gt;autoreconf -i&lt;/code&gt; ile, configure betiğini yeniden oluşturmak gerekiyor. Böylece, &lt;code&gt;./configure --enable-debug&lt;/code&gt;
komutu ile, &lt;code&gt;config.h&lt;/code&gt; dosyasında &lt;code&gt;#define ENABLE_DEBUG&lt;/code&gt; satırı eklenmesini sağlayabiliriz. Bu makro tanımlı olduğunda,
program çıktı verirken bu makronun varlığını kontrol ederek, ekstra bilgi sunabilir.&lt;/p&gt;
&lt;p&gt;Toparlamak gerekirse, &lt;code&gt;autotools&lt;/code&gt; kullanarak bir build sistemi oluşturmak konusuna yüzeysel bir giriş yaptık. Bu araçlar hakkında
söylenebilecekler malesef bir blog yazısına sığamayacak kadar çok. Eğer projenizde &lt;code&gt;autotools&lt;/code&gt; kullanmaya karar verirseniz,
sıfırdan &lt;code&gt;configure.ac&lt;/code&gt; ve &lt;code&gt;Makefile.am&lt;/code&gt; dosyaları yazmak yerine, yapacağınız projeye benzer bir projenin dosyalarını
kullanarak başlamanız işinizi kolaylaştıracaktır. Eğer &lt;a href="https://github.com/search?q=configure+extension%3Aac&amp;amp;type=Code"&gt;Github'da autotools kullanan projeleri&lt;/a&gt;
aratırsanız, karşınıza binlerce sonuç çıkacatır. &lt;code&gt;automake&lt;/code&gt; ve &lt;code&gt;autoconf&lt;/code&gt; belgeleri içinde,
kullanabileceğiniz tüm makrolar hakkında bilgi alabilirsiniz.&lt;/p&gt;&lt;/div&gt;</description><guid>http://ysar.net/yazilim-dunyasi/autotools.html</guid><pubDate>Sun, 23 Jun 2019 13:16:00 GMT</pubDate></item></channel></rss>